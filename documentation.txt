Mastering Next.js - Build Airbnb Clone from Scratch (2024)


Section 01: Introduction

01. Useful Info

02. Github Repo
-otvorimo link https://github.com/john-smilga/nextjs-course-home-away

03. Discord Channel
-otvorimo link: https://discord.com/invite/GhUxjr66xz


Section 02: Next.js Tutorial

04. Important Info!!!

05. Install
-otvorimo web stranicu: https://nextjs.org/
-u terminalu instaliramo Next.js aplikaciju verziju 14.1.4 sa komandom npx create-next-app@14.1.4

06. Files and Folders
-dodajemo plan rada u README.md fajl
-u globals.css fajlu obrisemo CSS stil

07. Home Page
-u app/page.tsx fajlu kreiramo funkciju HomePage()

08. Create Page
-u folderu app kreiramo folder about
-u folderu about kreiramo komponentu page.tsx
-u komponenti about/page.tsx kreiramo funkciju AboutPage()
-kreiramo folder info i komponentu page.tsx
-u komponenti info/page.tsx kreiramo funkciju InfoPage()

09. Link Component
-u komponentu app/page.tsx importujemo komponentu Link iz paketa next/link
-u jsx-u kreiramo komponentu Link sa otvorenim i zatvorenim tagom
-komponenti Link dodajemo Tailwind CSS klase
-komponenti Link dodajemo prop href

10. Nested Routes
-u folderu info kreiramo folder contact i komponentu page.tsx
-u komponenti contact/page.ts kreiramo funkciju ContactPage()

11. CSS

12. Tailwind Info (optional)

13. Layout Component
-manje izmjene u komponenti layout.tsx

14. Navbar Component
-kreiramo folder components i komponentu Navbar.tsx
-u komponentu Navbar.tsx importujemo komponentu Link 
-u jsx-u kreiramo nav element kao roditelj element
-nav elementu dodajemo Tailwind CSS klase
-u nav elementu kreiramo cetiri komponente Link
-u komponentu layout.tsx importujemo komponentu Navbar.tsx

15. Fonts
-u komponentu layout.tsx importujemo funkcije Inter, Inconsolata, Roboto iz paketa next/font/google
-kreiramo varijable const inter, const inconsolata i const roboto
-u jsx-u, body elementu dodajemo prop className
-u prop className proslijedujemo vrijednost varijable inter.className

16. Metadata
-u komponentu layout importujemo tip Metadata iz paketa next
-kreiramo i eksportujemo varijablu const metadata
-varijabli const metadata dodajemo tip Metadata

17. Server vs Client

18. Counter
-u folderu app kreiramo folder counter i komponentu page.tsx
-u komponenti counter/page.tsx kreiramo funkciju Counter()
-u funkciji Counter(), u return izjavi kreiramo HTML elemente sa Tailwind CSS klasama
-kreiramo state varijablu state i set funkciju setCount
-u folderu components kreiramo komponentu Counter
-premjestamo kod iz komponente counter/page.tsx u komponentu Counter.tsx
-u komponentu counter/page.tsx importujemo komponentu Counter.tsx

19. Fetch Data
-otvorimo link: https://www.course-api.com/react-tours-project
-kreiramo folder tours i komponentu page.tsx
-u komponenti tours/page.tsx kreiramo funkciju ToursPage()
-kreiramo varijablu const url
-kreiramo tip Tour
-funkciji ToursPage() dodajemo asinhronost
-u funkciju ToursPage() dodajemo metodu await fetch(url)
-vrijednost metode await fetch(url) pohranjujemo u varijablu const response
-dodajemo metodu await response.json()
-vrijednost metode await response.json() pohranjujemo u varijablu const data
-varijabli const data dodajemo tip Tour[]
-u jsx-u kreiramo roditelj section element
-u section elementu kreiramo h2 element sa Tailwind CSS klasama
-dodajemo metodu data.map()

20. Refactor
-u komponenti tours/page.tsx kreiramo asinhronu funkciju fetchTours()
-u funkciju fetchTours() dodajemo metodu await new Promise()
-kreiramo varijable const response i const data
-dodajemo izjavu return data
-u funkciju ToursPage() dodajemo funkciju fetchTours()

21. Loading Component
-u folderu tours kreiramo komponentu loading.tsx
-u komponenti loading.tsx kreiramo funkciju loading()
-u funkciji loading(), u return izjavi kreiramo span element sa Tailwind CSS klasama

22. Error Component
-u folderu tours kreiramo komponente error.tsx
-u komponenti error.tsx kreiramo funkciju error()
-u funkciji error(), u return izjavi kreiramo span element

23. Nested Layout
-u folderu tours kreiramo komponentu layout.tsx
-u komponenti tours/layout.tsx kreiramo funkciju ToursLayout()
-funkciji ToursLayout() dodajemo parametar destruktuirani prop children
-parametru prop children dodajemo tip React.ReactNode
-u jsx-u kreiramo div roditelj element
-u div elementu kreiramo header element sa Tailwind CSS klasama
-u header elementu kreiramo h2 element sa Tailwind CSS klasama
-dodajemo prop {children}

24. Dynamic Page
-u folderu tours kreiramo folder [id]
-u folderu [id] kreiramo komponentu page.tsx
-u komponenti page.tsx() kreiramo funkciju page()
-funkciji page() dodajemo destruktuirani parametar prop { params }
-parametru params dodajemo tip 
-u jsx-u kreiramo roditelj div element
-u div elementu kreiramo h2 element sa Tailwind CSS klasama
-u h2 element dodajemo {params.id}
-u komponentu tours/page.tsx importujemo komponentu Link
-u metodu data.map() dodajemo komponentu Link 
-komponenti Link dodajemo prop key, href i className
-u href dodajemo dinamicki link sa id-em

25. Local Image
-kreiramo folder images
-u folder images dodajemo sliku maps.jpg
-u komponentu [id]/page.tsx importujemo komponentu Image iz paketa next/image
-kreiramo varijablu const url
-u roditelj div elementu kreiramo section element sa Tailwind CSS klasama
-u section elementu kreiramo div element za komponentu Image
-u div elementu kreiramo komponentu Image
-komponenti Image dodajemo prop src, alt, width, height i className
-komponenti Image dodajemo Tailwind CSS klase

26. Remote Images
-u komponenti [id]/page.tsx kreiramo jos jedan div element sa komponentu Image
-komponenti Image dodajemo prop src, alt, width, height, priority i className
-u next.config.mjs fajl dodajemo objekt images
-u objekt images dodajemo niz remotePatterns

27. Responsive Images
-u komponenti tours/page.tsx div element dodajemo Tailwind CSS klase
-importujemo komponentu Image
-kreiramo div element za metodu data.map()
-kreiramo div element sa Tailwind CSS klasama za komponentu Image
-komponenti Image dodajemo prop src, alt, fill, sizes, priority i className

28. More Routing Options
-u folderu app kreiramo folder (dashboard)
-u folderu (dashboard) kreiramo folder auth
-u folderu auth kreiramo folder [[...sign-in]]
-u folderu [[...sign-in]] kreiramo komponentu page.tsx
-u komponenti page.tsx kreiramo funkciju SignInPage()
-u pretrazivacu otvorimo rutu: http://localhost:3000/auth/sign-in/123

29. Server Actions - Info

30. Actions Page - Setup
-u folderu app kreiramo folder actions i komponentu page.tsx
-u komponenti actions/page.tsx kreiramo funkciju ActionsPage()
-u folderu components kreiramo komponente Form.tsx i UsersList.tsx
-u komponentu actions/page.tsx importujemo komponente Form.tsx i UsersList.tsx
-u komponenti Form.tsx, u funkciji Form(), u jsx-u kreiramo form roditelj element
-u form elementu kreiramo elemente h2, dva inputa i button
-h2 elementu dodajemo Tailwind CSS klase
-input elementima dodajemo atribute type, name, defaultValue, className i required
-kreiramo varijable const formStyle, const inputStyle i const btnStyle
-form elementu dodajemo klasu formStyle
-input elementima dodajemo klasu inputStyle
-button elementu dodajemo atribute type i className
-button elementu dodajemo klasu btnStyle
-kreiramo asinhronu funkciju createUser()
-u funkciju createUser() dodajemo direktivu 'use server' 
-form elemente dodajemo atribut action
-u atribut action proslijedujemo vrijednost funkcije createUser

31. Actions File
-kreiramo folder utils i actions.ts fajl
-u actions.ts fajlu kreiramo i eksportujemo funkciju createUser()
-u actions.ts fajl dodajemo direktivu 'use server'
-u komponentu Form.tsx importujemo funkciju createUser
-komponenti Form.tsx dodajemo direktivu 'use client'
-u actions.ts fajlu funkciji createUser() dodajemo parametar formData sa tipom FormData
-u funkciji createUser() kreiramo varijable const firstName, const lastName i const rawData

32. Save User
-u actions.ts fajlu kreiramo tip User
-importujemo funkcije readFile i writeFile iz paketa fs
-u funkciji createUser() kreiramo varijablu const newUser
-kreiramo i eksportujemo funkciju fetchUsers()
-funkciji fetchUsers() dodajemo tip Promise<User[]>
-u funkciji fetchUsers() kreiramo varijablu const result
-kreiramo varijablu const users
-dodajemo izjavu return users
-kreiramo asinhronu funkciju saveUser() sa parametrom user
-parametru user dodajemo tip User
-u funkciji saveUser() kreiramo varijablu const users
-dodajemo metodu users.push(user)
-dodajemo metodu await writeFile()
-u funkciju createUser() dodajemo metodu await saveUser()

33. Fetch Users
-u komponente UsersList.tsx importujemo funkciju fetchUsers()
-u funkciji UsersList.tsx kreiramo varijablu const users
-u jsx-u, u roditelj div element dodajemo ternarni operator users.length
-dodajemo metodu users.map()

34. Revalidate Fetch and Redirect
-u actions.ts fajl importujemo funkcije redirect i revalidatePath iz paketa next
-u funkciju createUser() dodajemo funkciju revalidatePath() i redirect()

35. UseFormStatus Hook
-otvorimo link: https://react.dev/reference/react-dom/hooks/useFormStatus
-u komponentu Form.tsx importujemo funkciju useFormStatus iz paketa react-dom
-kreiramo funkciju SubmitButton()
-u funkciji SubmitButton(), u jsx-u kreiramo button element sa prop type, className i disableb
-u funkciji SubmitButton() dodajemo funkciju useFormStatus()
-vrijednost funkcije useFormStatus() pohranjujemo u destruktuiranu varijablu const { pending }
-u prop disableb proslijedujemo vrijednost varijable pending
-u button element dodajemo ternarni operator za varijablu pending

36. UseFormState Hook
-otvorimo link: https://react.dev/reference/react-dom/hooks/useFormState
-u komponentu Form.tsx importujemo i kreiramo funkciju useFormState iz paketa react-dom
-vrijednost funkcije useFormState() pohranjujemo u varijable const [message, formAction]
-u prop action proslijedujemo vrijednost funkcije formAction
-u form elementu dodajemo uslov {message && <p>{messaeg}</p>}
-u actions.ts fajlu, funkciji createUser() dodajemo parametar prevState sa tipom any
-u blokove koda try - catch dodajemo izjave return

37. Delete Button
-u folderu components kreiramo komponentu DeleteButton.tsx
-u komponenti DeleteButton.tsx, funkciji DeleteButton() dodajemo parametar destruktuirani prop id sa tipom
-u jsx-u kreiramo roditelj form element
-u form elementu kreiramo button element delete sa prop type i className
-u komponentu UsersList.tsx importujemo komponentu DeleteButton.tsx
-u metodu users.map() dodajemo komponentu DeleteButton
-komponenti DeleteButton dodajemo prop id

38. Input Hidden
-u actions.ts fajlu kreiramo i eksportujemo asinhrone funkcije deleteUser() i removeUser() sa parametrom formData
-parametru formData dodajemo tip FormData
-u komponentu DeleteButton.tsx importujemo funkciju deleteUser 
-form elementu dodajemo prop action
-u prop action proslijedujemo funkciju deleteUser
-kreiramo input element sa atributima type, name i value
-u atribut value proslijedujemo varijablu id
-u funkciji deleteUser() kreiramo varijable const id, const users i const updatedUsers
-dodajemo metodu await writeFile()
-dodajemo funkciju revalidatePath('/actions')

39. Bind Method
-u komponentu DeleteButton.tsx importujemo funkciju removeUser
-u funkciji DeleteButton() kreiramo funkciju removeUserWithId()
-u prop action proslijedujemo funkciju removeUserWithId
-u actions.ts fajlu, funkciji removeUser() dodajemo parametar id sa tipom string
-u funkciji removeUser() kreiramo varijable const name, const users i const updatedUsers

40. Route Handlers - Info

41. Route Handler - GET
-u folderu app kreiramo folder api
-u folderu api kreiramo folder users i route.ts fajl
-u route.ts fajl importujemo funkciju fetchUsers iz foldera utils
-kreiramo i eksportujemo asinhronu funkciju GET
-u funkciju GET u return izjavu dodajemo metodu Response.json()
-kreiramo varijablu const users
-u pretrazivacu otvorimo link: http://localhost:3000/api/users

42. Route Handlers - Params
-u route.ts fajlu, funkciji GET dodajemo parametar req sa tipom Request
-dodajemo metodu new URL()
-vrijednost metode new URL() pohranjujemo u destruktuiranu varijablu const { searchParams }
-dodajemo metodu searchParams.get()
-vrijednost metode searchParams.get() pohranjujemo u varijablu const id
-importujemo tip NextRequest i funkciju NextResponse iz paketa next/server
-parametru req dodajemo tip NextResponse
-u return izjavu dodajemo metodu NextResponse.redirect()

43. Route Handlers - POST
-u route.ts fajl importujemo funkciju saveUser iz foldera utils
-kreiramo i eksportujemo asinhronu funkciju POST sa parametrom req
-parametru req dodajemo tip Request
-kreiramo varijable const user i const newUser
-dodajemo metodu await saveUser(newUser)
-u return izjavu dodajemo Response.json()
-u Postman-u testiramo rute GET i POST

44. Middleware
-kreiramo middleware.ts fajl
-u middleware.ts fajlu kreiramo i eksportujemo funkciju middleware()
-u funkciju middleware() dodajemo izjavu return Response.json()
-kreiramo i eksportujemo objekt varijablu const config
-u objekt config dodajemo niz matcher
-importujemo funkciju NextResponse
-u funkciju middleware dodajemo funkciju NextResponse.redirect()

45. Local Build
-u terminalu ukucamo komandu npm run build
-nakon komande npm run build ukucamo komandu npm start

46. Cache


Section 03: HomeAway Project

47. Project Overview

48. Install New Next.js Application
-u terminalu instaliramo Next.js aplikaciju home-away verziju 14.2.1.

49. Remove Boilerplate
-u komponenti app/page.tsx kreiramo funkciju HomePage
-u komponenti layout.tsx, u varijablu const metadata dodajemo opis projekta
-u globals.css fajlu brisemo CSS stil
-u README.md fajl dodajemo plan rada

50. Create Pages
-u folderu app kreiramo foldere: bookings, checkout, favorites, profile, properties, rentals i reviews
-u kreiranim folderima kreiramo komponente page.tsx

51. Important Update !!!

52. Install Shadcn/ui Library
-otvorimo web stranicu: https://ui.shadcn.com/
-u terminalu ukucamo komandu npx shadcn@latest init
-manje izmjene u fajlovima globals.css i tailwind.config.ts
-generisani folder lib, fajlovi utils.ts i components.json

53. Shadcn/ui Button Component
-u terminalu ukucamo komandu npx shadcn@latest add button
-generisani folderi components, ui i komponenta button.tsx
-u komponentu app/page.tsx importujemo komponentu Button iz foldera components 
-u jsx-u, komponenti Button dodajemo prop variant, size i className

54. Install More Shadcn/ui Components
-u folderu components kreiramo foldere card, form, home, properties i navbar
-u terminalu instaliramo vise Shadcn/ui komponenti
-generisan folder hooks i use-toast.ts fajl
-u folderu components/ui generisano vise jsx komponenti
-u folderu navbar kreiramo sedam jsx komponenti

55. Navbar Structure
-u globals.css fajlu dodajemo direktivu @layer components i klasu .container
-u komponentu Navbar.tsx importujemo komponente Logo, NavSearch, LinksDropdown i DarkMode
-u jsx-u, kreiramo roditelj nav element sa Tailwind CSS klasom
-u nav elementu kreiramo div element sa Tailwind CSS klasama
-u div element dodajemo komponente
-u komponentu layout.tsx importujemo komponentu Navbar.tsx
-u jsx-u, u body elementu kreiramo main element sa Tailwind CSS klasama
-u body element dodajemo komponentu Navbar
-u main element dodajemo prop children