Mastering Next.js - Build Airbnb Clone from Scratch (2024)


Section 01: Introduction

01. Useful Info

02. Github Repo
-otvorimo link https://github.com/john-smilga/nextjs-course-home-away

03. Discord Channel
-otvorimo link: https://discord.com/invite/GhUxjr66xz


Section 02: Next.js Tutorial

04. Update !!!
-kreirati Next.js aplikaciju sa komandom npx create-next-app@14

05. Important Info!!!

06. Install
-otvorimo web stranicu: https://nextjs.org/
-u terminalu instaliramo Next.js aplikaciju verziju 14.1.4 sa komandom npx create-next-app@14.1.4

07. Files and Folders
-dodajemo plan rada u README.md fajl
-u globals.css fajlu obrisemo CSS stil

08. Home Page
-u app/page.tsx fajlu kreiramo funkciju HomePage()

09. Create Page
-u folderu app kreiramo folder about
-u folderu about kreiramo komponentu page.tsx
-u komponenti about/page.tsx kreiramo funkciju AboutPage()
-kreiramo folder info i komponentu page.tsx
-u komponenti info/page.tsx kreiramo funkciju InfoPage()

10. Link Component
-u komponentu app/page.tsx importujemo komponentu Link iz paketa next/link
-u jsx-u kreiramo komponentu Link sa otvorenim i zatvorenim tagom
-komponenti Link dodajemo Tailwind CSS klase
-komponenti Link dodajemo prop href

11. Nested Routes
-u folderu info kreiramo folder contact i komponentu page.tsx
-u komponenti contact/page.ts kreiramo funkciju ContactPage()

12. CSS

13. Tailwind Info (optional)

14. Layout Component
-manje izmjene u komponenti layout.tsx

15. Navbar Component
-kreiramo folder components i komponentu Navbar.tsx
-u komponentu Navbar.tsx importujemo komponentu Link 
-u jsx-u kreiramo nav element kao roditelj element
-nav elementu dodajemo Tailwind CSS klase
-u nav elementu kreiramo cetiri komponente Link
-u komponentu layout.tsx importujemo komponentu Navbar.tsx

16. Fonts
-u komponentu layout.tsx importujemo funkcije Inter, Inconsolata, Roboto iz paketa next/font/google
-kreiramo varijable const inter, const inconsolata i const roboto
-u jsx-u, body elementu dodajemo prop className
-u prop className proslijedujemo vrijednost varijable inter.className

17. Metadata
-u komponentu layout importujemo tip Metadata iz paketa next
-kreiramo i eksportujemo varijablu const metadata
-varijabli const metadata dodajemo tip Metadata

18. Server vs Client

19. Counter
-u folderu app kreiramo folder counter i komponentu page.tsx
-u komponenti counter/page.tsx kreiramo funkciju Counter()
-u funkciji Counter(), u return izjavi kreiramo HTML elemente sa Tailwind CSS klasama
-kreiramo state varijablu state i set funkciju setCount
-u folderu components kreiramo komponentu Counter
-premjestamo kod iz komponente counter/page.tsx u komponentu Counter.tsx
-u komponentu counter/page.tsx importujemo komponentu Counter.tsx

20. Fetch Data
-otvorimo link: https://www.course-api.com/react-tours-project
-kreiramo folder tours i komponentu page.tsx
-u komponenti tours/page.tsx kreiramo funkciju ToursPage()
-kreiramo varijablu const url
-kreiramo tip Tour
-funkciji ToursPage() dodajemo asinhronost
-u funkciju ToursPage() dodajemo metodu await fetch(url)
-vrijednost metode await fetch(url) pohranjujemo u varijablu const response
-dodajemo metodu await response.json()
-vrijednost metode await response.json() pohranjujemo u varijablu const data
-varijabli const data dodajemo tip Tour[]
-u jsx-u kreiramo roditelj section element
-u section elementu kreiramo h2 element sa Tailwind CSS klasama
-dodajemo metodu data.map()

21. Refactor
-u komponenti tours/page.tsx kreiramo asinhronu funkciju fetchTours()
-u funkciju fetchTours() dodajemo metodu await new Promise()
-kreiramo varijable const response i const data
-dodajemo izjavu return data
-u funkciju ToursPage() dodajemo funkciju fetchTours()

22. Loading Component
-u folderu tours kreiramo komponentu loading.tsx
-u komponenti loading.tsx kreiramo funkciju loading()
-u funkciji loading(), u return izjavi kreiramo span element sa Tailwind CSS klasama

23. Error Component
-u folderu tours kreiramo komponente error.tsx
-u komponenti error.tsx kreiramo funkciju error()
-u funkciji error(), u return izjavi kreiramo span element

24. Nested Layout
-u folderu tours kreiramo komponentu layout.tsx
-u komponenti tours/layout.tsx kreiramo funkciju ToursLayout()
-funkciji ToursLayout() dodajemo parametar destruktuirani prop children
-parametru prop children dodajemo tip React.ReactNode
-u jsx-u kreiramo div roditelj element
-u div elementu kreiramo header element sa Tailwind CSS klasama
-u header elementu kreiramo h2 element sa Tailwind CSS klasama
-dodajemo prop {children}

25. Dynamic Page
-u folderu tours kreiramo folder [id]
-u folderu [id] kreiramo komponentu page.tsx
-u komponenti page.tsx() kreiramo funkciju page()
-funkciji page() dodajemo destruktuirani parametar prop { params }
-parametru params dodajemo tip 
-u jsx-u kreiramo roditelj div element
-u div elementu kreiramo h2 element sa Tailwind CSS klasama
-u h2 element dodajemo {params.id}
-u komponentu tours/page.tsx importujemo komponentu Link
-u metodu data.map() dodajemo komponentu Link 
-komponenti Link dodajemo prop key, href i className
-u href dodajemo dinamicki link sa id-em

26. Local Image
-kreiramo folder images
-u folder images dodajemo sliku maps.jpg
-u komponentu [id]/page.tsx importujemo komponentu Image iz paketa next/image
-kreiramo varijablu const url
-u roditelj div elementu kreiramo section element sa Tailwind CSS klasama
-u section elementu kreiramo div element za komponentu Image
-u div elementu kreiramo komponentu Image
-komponenti Image dodajemo prop src, alt, width, height i className
-komponenti Image dodajemo Tailwind CSS klase

27. Remote Images
-u komponenti [id]/page.tsx kreiramo jos jedan div element sa komponentu Image
-komponenti Image dodajemo prop src, alt, width, height, priority i className
-u next.config.mjs fajl dodajemo objekt images
-u objekt images dodajemo niz remotePatterns

28. Responsive Images
-u komponenti tours/page.tsx div element dodajemo Tailwind CSS klase
-importujemo komponentu Image
-kreiramo div element za metodu data.map()
-kreiramo div element sa Tailwind CSS klasama za komponentu Image
-komponenti Image dodajemo prop src, alt, fill, sizes, priority i className

29. More Routing Options
-u folderu app kreiramo folder (dashboard)
-u folderu (dashboard) kreiramo folder auth
-u folderu auth kreiramo folder [[...sign-in]]
-u folderu [[...sign-in]] kreiramo komponentu page.tsx
-u komponenti page.tsx kreiramo funkciju SignInPage()
-u pretrazivacu otvorimo rutu: http://localhost:3000/auth/sign-in/123

30. Server Actions - Info

31. Actions Page - Setup
-u folderu app kreiramo folder actions i komponentu page.tsx
-u komponenti actions/page.tsx kreiramo funkciju ActionsPage()
-u folderu components kreiramo komponente Form.tsx i UsersList.tsx
-u komponentu actions/page.tsx importujemo komponente Form.tsx i UsersList.tsx
-u komponenti Form.tsx, u funkciji Form(), u jsx-u kreiramo form roditelj element
-u form elementu kreiramo elemente h2, dva inputa i button
-h2 elementu dodajemo Tailwind CSS klase
-input elementima dodajemo atribute type, name, defaultValue, className i required
-kreiramo varijable const formStyle, const inputStyle i const btnStyle
-form elementu dodajemo klasu formStyle
-input elementima dodajemo klasu inputStyle
-button elementu dodajemo atribute type i className
-button elementu dodajemo klasu btnStyle
-kreiramo asinhronu funkciju createUser()
-u funkciju createUser() dodajemo direktivu 'use server' 
-form elemente dodajemo atribut action
-u atribut action proslijedujemo vrijednost funkcije createUser

32. Actions File
-kreiramo folder utils i actions.ts fajl
-u actions.ts fajlu kreiramo i eksportujemo funkciju createUser()
-u actions.ts fajl dodajemo direktivu 'use server'
-u komponentu Form.tsx importujemo funkciju createUser
-komponenti Form.tsx dodajemo direktivu 'use client'
-u actions.ts fajlu funkciji createUser() dodajemo parametar formData sa tipom FormData
-u funkciji createUser() kreiramo varijable const firstName, const lastName i const rawData

33. Save User
-u actions.ts fajlu kreiramo tip User
-importujemo funkcije readFile i writeFile iz paketa fs
-u funkciji createUser() kreiramo varijablu const newUser
-kreiramo i eksportujemo funkciju fetchUsers()
-funkciji fetchUsers() dodajemo tip Promise<User[]>
-u funkciji fetchUsers() kreiramo varijablu const result
-kreiramo varijablu const users
-dodajemo izjavu return users
-kreiramo asinhronu funkciju saveUser() sa parametrom user
-parametru user dodajemo tip User
-u funkciji saveUser() kreiramo varijablu const users
-dodajemo metodu users.push(user)
-dodajemo metodu await writeFile()
-u funkciju createUser() dodajemo metodu await saveUser()

34. Fetch Users
-u komponente UsersList.tsx importujemo funkciju fetchUsers()
-u funkciji UsersList.tsx kreiramo varijablu const users
-u jsx-u, u roditelj div element dodajemo ternarni operator users.length
-dodajemo metodu users.map()

35. Revalidate Fetch and Redirect
-u actions.ts fajl importujemo funkcije redirect i revalidatePath iz paketa next
-u funkciju createUser() dodajemo funkciju revalidatePath() i redirect()

36. UseFormStatus Hook
-otvorimo link: https://react.dev/reference/react-dom/hooks/useFormStatus
-u komponentu Form.tsx importujemo funkciju useFormStatus iz paketa react-dom
-kreiramo funkciju SubmitButton()
-u funkciji SubmitButton(), u jsx-u kreiramo button element sa prop type, className i disableb
-u funkciji SubmitButton() dodajemo funkciju useFormStatus()
-vrijednost funkcije useFormStatus() pohranjujemo u destruktuiranu varijablu const { pending }
-u prop disableb proslijedujemo vrijednost varijable pending
-u button element dodajemo ternarni operator za varijablu pending

37. UseFormState Hook
-otvorimo link: https://react.dev/reference/react-dom/hooks/useFormState
-u komponentu Form.tsx importujemo i kreiramo funkciju useFormState iz paketa react-dom
-vrijednost funkcije useFormState() pohranjujemo u varijable const [message, formAction]
-u prop action proslijedujemo vrijednost funkcije formAction
-u form elementu dodajemo uslov {message && <p>{message}</p>}
-u actions.ts fajlu, funkciji createUser() dodajemo parametar prevState sa tipom any
-u blokove koda try - catch dodajemo izjave return

38. Delete Button
-u folderu components kreiramo komponentu DeleteButton.tsx
-u komponenti DeleteButton.tsx, funkciji DeleteButton() dodajemo parametar destruktuirani prop id sa tipom
-u jsx-u kreiramo roditelj form element
-u form elementu kreiramo button element delete sa prop type i className
-u komponentu UsersList.tsx importujemo komponentu DeleteButton.tsx
-u metodu users.map() dodajemo komponentu DeleteButton
-komponenti DeleteButton dodajemo prop id

39. Input Hidden
-u actions.ts fajlu kreiramo i eksportujemo asinhrone funkcije deleteUser() i removeUser() sa parametrom formData
-parametru formData dodajemo tip FormData
-u komponentu DeleteButton.tsx importujemo funkciju deleteUser 
-form elementu dodajemo prop action
-u prop action proslijedujemo funkciju deleteUser
-kreiramo input element sa atributima type, name i value
-u atribut value proslijedujemo varijablu id
-u funkciji deleteUser() kreiramo varijable const id, const users i const updatedUsers
-dodajemo metodu await writeFile()
-dodajemo funkciju revalidatePath('/actions')

40. Bind Method
-u komponentu DeleteButton.tsx importujemo funkciju removeUser
-u funkciji DeleteButton() kreiramo funkciju removeUserWithId()
-u prop action proslijedujemo funkciju removeUserWithId
-u actions.ts fajlu, funkciji removeUser() dodajemo parametar id sa tipom string
-u funkciji removeUser() kreiramo varijable const name, const users i const updatedUsers

41. Route Handlers - Info

42. Route Handler - GET
-u folderu app kreiramo folder api
-u folderu api kreiramo folder users i route.ts fajl
-u route.ts fajl importujemo funkciju fetchUsers iz foldera utils
-kreiramo i eksportujemo asinhronu funkciju GET
-u funkciju GET u return izjavu dodajemo metodu Response.json()
-kreiramo varijablu const users
-u pretrazivacu otvorimo link: http://localhost:3000/api/users

43. Route Handlers - Params
-u route.ts fajlu, funkciji GET dodajemo parametar req sa tipom Request
-dodajemo metodu new URL()
-vrijednost metode new URL() pohranjujemo u destruktuiranu varijablu const { searchParams }
-dodajemo metodu searchParams.get()
-vrijednost metode searchParams.get() pohranjujemo u varijablu const id
-importujemo tip NextRequest i funkciju NextResponse iz paketa next/server
-parametru req dodajemo tip NextResponse
-u return izjavu dodajemo metodu NextResponse.redirect()

44. Route Handlers - POST
-u route.ts fajl importujemo funkciju saveUser iz foldera utils
-kreiramo i eksportujemo asinhronu funkciju POST sa parametrom req
-parametru req dodajemo tip Request
-kreiramo varijable const user i const newUser
-dodajemo metodu await saveUser(newUser)
-u return izjavu dodajemo Response.json()
-u Postman-u testiramo rute GET i POST

45. Middleware
-kreiramo middleware.ts fajl
-u middleware.ts fajlu kreiramo i eksportujemo funkciju middleware()
-u funkciju middleware() dodajemo izjavu return Response.json()
-kreiramo i eksportujemo objekt varijablu const config
-u objekt config dodajemo niz matcher
-importujemo funkciju NextResponse
-u funkciju middleware dodajemo funkciju NextResponse.redirect()

46. Local Build
-u terminalu ukucamo komandu npm run build
-nakon komande npm run build ukucamo komandu npm start

47. Cache


Section 03: HomeAway Project

48. Project Overview

49. Update !!!
-kreirati Next.js aplikaciju sa komandom npx create-next-app@14

50. Install New Next.js Application
-u terminalu instaliramo Next.js aplikaciju home-away verziju 14.2.1.

51. Remove Boilerplate
-u komponenti app/page.tsx kreiramo funkciju HomePage
-u komponenti layout.tsx, u varijablu const metadata dodajemo opis projekta
-u globals.css fajlu brisemo CSS stil
-u README.md fajl dodajemo plan rada

52. Create Pages
-u folderu app kreiramo foldere: bookings, checkout, favorites, profile, properties, rentals i reviews
-u kreiranim folderima kreiramo komponente page.tsx

53. Important Update !!!

54. Install Shadcn/ui Library
-otvorimo web stranicu: https://ui.shadcn.com/
-u terminalu ukucamo komandu npx shadcn@latest init
-manje izmjene u fajlovima globals.css i tailwind.config.ts
-generisani folder lib, fajlovi utils.ts i components.json

55. Shadcn/ui Button Component
-u terminalu ukucamo komandu npx shadcn@latest add button
-generisani folderi components, ui i komponenta button.tsx
-u komponentu app/page.tsx importujemo komponentu Button iz foldera components 
-u jsx-u, komponenti Button dodajemo prop variant, size i className

56. Install More Shadcn/ui Components
-u folderu components kreiramo foldere card, form, home, properties i navbar
-u terminalu instaliramo vise Shadcn/ui komponenti
-generisan folder hooks i use-toast.ts fajl
-u folderu components/ui generisano vise jsx komponenti
-u folderu navbar kreiramo sedam jsx komponenti

57. Navbar Structure
-u globals.css fajlu dodajemo direktivu @layer components i klasu .container
-u komponentu Navbar.tsx importujemo komponente Logo, NavSearch, LinksDropdown i DarkMode
-u jsx-u, kreiramo roditelj nav element sa Tailwind CSS klasom
-u nav elementu kreiramo div element sa Tailwind CSS klasama
-u div element dodajemo komponente
-u komponentu layout.tsx importujemo komponentu Navbar.tsx
-u jsx-u, u body elementu kreiramo main element sa Tailwind CSS klasama
-u body element dodajemo komponentu Navbar
-u main element dodajemo prop children

58. Logo and NavSearch Components
-otvorimo web stranicu: https://react-icons.github.io/react-icons/
-u terminalu instaliramo paket React Icons
-u terminalu ukucamo komandu npm i react-icons
-u komponentu Logo.tsx importujemo komponentu Link iz paketa Next
-importujemo React ikonicu (komponentu) LuTent iz paketa react-icons/lu
-importujemo komponentu Button iz komponente ui/button.tsx
-u komponentu NavSearch.tsx importujemo komponentu Input iz komponente ui/input.tsx
-u jsx-u komponenti Input dodajemo prop type, placeholder i className

59. Change Theme with Shadcn/ui
-otvorimo link: https://ui.shadcn.com/themes
-u globals.css fajl kopiramo CSS stil za direktivu @layer base 

60. Setup Dark Mode with Shadcn/ui
-otvorimo link: https://ui.shadcn.com/docs/dark-mode/next
-u folderu app kreiramo komponentu providers.tsx
-u komponentu providers.tsx dodajemo direktivu 'use client'
-kreiramo funkciju Providers()
-funkciji Providers() dodajemo parametar destruktuirani prop children
-parametru children dodajemo tip React.ReactNode
-u jsx-u dodajemo roditelj prazan fragment element
-u fragment element dodajemo prop children
-u komponentu layout.tsx importujemo komponentu Providers
-u jsx-u, dodajemo komponentu Providers sa otvorenim i zatvorenim tagom
-u komponentu Providers dodajemo komponentu Navbar i main element
-u terminalu instaliramo paket Next Themes
-u terminalu ukucamo komandu npm i next-themes
-kreiramo komponentu theme-provider.tsx
-u komponentu theme-provider.tsx kopiramo kod iz dokumentacije
-otvorimo link: https://stackoverflow.com/questions/69238794/cannot-find-module-next-or-its-corresponding-type-declarations
-u komponentu providers.tsx importujemo komponentu ThemeProvider
-u jsx-u dodajemo komponentu ThemeProvider sa otvorenim i zatvorenim tagom
-u komponentu ThemeProvider dodajemo prop children
-komponenti ThemeProvider dodajemo prop attribute, defaultTheme, enableSystem i disableTransitionOnChange
-u komponentu DarkMode.tsx dodajemo kod iz dokumentacije
-promjenimo ime funcije ModeToggle() u DarkMode()

61. LinksDropdown Component
-u komponentu UserIcon importujemo React ikonicu komponentu LuUser2
-u jsx-u komponenti LaUser2 dodajemo Tailwind CSS klase
-kreiramo folder utils
-u folderu utils kreiramo links.ts fajl
-u links.ts fajlu kreiramo tip NavLink
-kreiramo i eksportujemo varijablu niz const links 
-varijabli links dodajemo tip NavLink[]
-u varijabli const links kreiramo vise objekt ruti
-u komponentu LinksDropdown.tsx importujemo komponente iz komponente ui/dropdown-menu
-importujemo komponentu Button iz komponente ui/button.tsx
-importujemo niz links iz foldera utils
-importujemo komponentu Link
-importujemo komponentu UserIcon
-u jsx-u dodajemo komponentu DropdownMenu sa otvorenim i zatvorenim tagom
-u komponentu DropdownMenu dodajemo dvije komponente DropdownMenuTrigger i DropdownMenuContent sa otvorenim i zatvorenim tagom
-komponenti DropdownMenuTrigger dodajemo prop asChild
-u komponentu DropdownMenuTrigger dodajemo komponentu Button sa otvorenim i zatvorenim tagom
-komponenti Button dodajemo prop variant i className
-u komponentu Button dodajemo komponentu UserIcon
-komponenti DropdownMenuContent dodajemo prop className, align, sideOffset
-dodajemo metodu links.map()
-u metodu map() dodajemo komponentu Link sa prop href, className i key
-u komponentu Link dodajemo komponentu DropdownMenuItem sa otvorenim i zatvorenim tagom

62. Important Info !!!
-npm install @clerk/nextjs@5.0.1

63. Setup and Customize Clerk Auth Provider
-otvorimo web stranicu: https://clerk.com/
-kreiramo novu aplikaciju sa imenom npr. home-away-nextjs-2024
-u terminalu instaliramo Clerk paket sa komandom npm i @clerk/nextjs
-kreiramo fajlove .env.local i .env.local.example
-u .env.local fajlu kreiramo varijable NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY i CLERK_SECRET_KEY
-u .env.local.example dodajemo primjer varijabli koje je potrebno kreirati
-kreiramo middleware.ts fajl
-u middleware.ts fajl importujemo funkcije clerkMiddleware i createRouteMatcher iz paketa Clerk
-kad udemo u aplikaciju Home Away prijavimo se sa Github racunom

64. SignOutLink Component
-otvorimo link: https://ui.shadcn.com/docs/components/toast
-u komponentu SignOutLink.tsx dodajemo direktivu 'use client'
-importujemo komponentu SignOutButton iz paketa Clerk
-importujemo i kreiramo funkciju useToast iz use-toast.ts fajla
-vrijednost funkcije useToast() pohranjujemo u destruktuiranu varijablu const { toast }
-kreiramo funkciju handleLogout()
-u funkciju handleLogout() dodajemo funkciju toast()
-u jsx-u dodajemo roditelj komponentu SignOutButton sa otvorenim i zatvorenim tagom
-komponenti SignOutButton dodajemo prop redirectUrl
-u komponenti SignOutButton kreiramo button element sa Tailwind CSS klasama
-button elementu dodajemo dogadaj onClick
-u dogadaj onClick proslijedujemo funkciju handleLogout

65. LinksDropdown Component
-u komponentu SignOutLink.tsx dodajemo direktivu 'use client'
-u komponentu LinksDropdown.tsx importujemo komponentu DropdownMenuSeparator iz komponente ui/dropdown-menu.tsx
-importujemo komponente SignedOut, SignedIn, SignInButton SignUpButton iz paketa Clerk
-importujemo komponentu SignOutLink.tsx
-u jsx-u dodajemo logiku za prikazivanje linkova ukoliko smo prijavljeni

66. Create Profile - Setup
-u fajlovima .env.local i .env.loca.example kreiramo dvije env varijable za prijavu i registraciju
-u folderu profile kreiramo folder create i komponentu page.tsx
-u komponenti create/page.tsx kreiramo funkciju CreateProfilePage()
-kreiramo asinhronu funkciju createProfileAction() sa parametrom formData
-parametru formData dodajemo tip FormData
-u funkciju createProfileAction() dodajemo direktivu 'use server'
-kreiramo varijablu const firstName
-importujemo komponente Label, Input i Button
-u funkciji CreateProfilePage() kreiramo section roditelj element
-u section elementu kreiramo HTML elemente sa Tailwind CSS klasama
-form elementu dodajemo prop action
-u prop action proslijedujemo funkciju createProfileAction
-kreiramo div element za komponente Label i Input
-komponenti Label dodajemo prop htmlFor
-komponenta Input dodajemo prop id, name i type
-dodajemo Button element sa prop type i size

67. FormInput Component
-kreiramo folder form 
-u folderu form kreiramo komponentu FormInput.tsx
-u komponentu FormInput.tsx importujemo komponente Label i Input iz foldera ui
-kreiramo tip FormInputProps
-u jsx-u kreiramo roditelj div element
-u div element dodajemo komponente Label i Input
-funkciji FormInput() dodajemo parametre destruktuirane prop label, name, type, defaultValue i placeholder
-parametrima dodajemo tip FormInputProps
-komponenti Label dodajemo prop htmlFor i className
-u prop htmlFor proslijedujemo prop name
-komponenti Input dodajemo prop id, name, type, defaultValue, placeholder i required
-u komponenti create/page.tsx izbrisemo komponente Label i Input

68. SubmitButton Component
-u folderu form kreiramo komponentu Buttons.tsx
-u komponentu Buttons.tsx dodajemo direktivu 'use client'
-importujemo React ikonicu ReloadIcon 
-importujemo i kreiramo funkciju useFormStatus iz paketa react-dom
-importujemo komponentu Button iz foldera ui
-kreiramo tip SubmitButtonProps
-kreiramo i eksportujemo funkciju SubmitButton()
-funkciji SubmitButton() dodajemo parametre destruktuirane prop className i text
-parametrima dodajemo tip SubmitButtonProps
-vrijednost funkcije useFormStatus() pohranjujemo u destruktuiranu varijablu const { pending }
-u jsx-u dodajemo komponentu Button kao roditelj element
-komponenti Button dodajemo prop type, disableb, className i size
-u komponentu Button dodajemo uslov ternarni operator za varijablu pending, tj. uslov za pojavljivanje ikone ReloadIcon
-u komponenti create/page.tsx izbrisemo komponentu Button

69. FormContainer Component
-u folderu form kreiramo komponentu FormContainer.tsx
-u komponentu FormContainer.tsx dodajemo direktivu 'use client'
-importujemo i kreiramo funkciju useFormState() iz paketa react-dom
-importujemo i kreiramo funkciju useEffect() iz paketa react
-importujemo i kreiramo funkciju useToast() iz use-toast.ts fajla
-kreiramo varijablu objekt const initialState
-funkciji FormContainer() dodajemo parametre destruktuirane prop action i children
-parametrima dodajemo tipove
-u jsx-u kreiramo form element sa prop action
-u form element dodajemo prop children
-vrijednost funkcije useFormState(action, initialState) pohranjujemo u destruktuirane varijable const [state, formAction]
-u prop action proslijedujemo funkciju formAction
-vrijednost funkcije useToast() pohranjujemo u destruktuiranu varijablu const { toast }
-prvi argument funkcije useEffect() je anonimna funkcija, a drugi niz []
-u anonimnu funkciju dodajemo uslov if (state.message)
-u uslov if (state.message) dodajemo funkciju toast()
-u niz dodajemo varijable state i toast
-u folderu utils kreiramo types.ts fajl
-u types.ts fajlu kreiramo i eksporujemo tip actionFunction
-funkciji actionFunction() dodajemo parametre prevState i formData
-u komponentu FormContainer.tsx importujemo tip actionFunction iz foldera utils
-u funkciji FormContainer() parametru action dodajemo tip actionFunction
-parametru children dodajemo tip React.ReactNode

70. Refactor Create Profile
-u komponentu create/page.tsx importujemo komponente FormContainer.tsx, FormInput.tsx i SubmitButton.tsx
-u jsx-u dodajemo komponentu FormContainer.tsx sa otvorenim i zatvorenim tagom
-komponenti FormContainer dodajemo prop action
-u prop action proslijedujemo funkciju createProfileAction
-funkciji createProfileAction() dodajemo parametar prevState sa tipom any
-u komponenti FormContainer kreiramo div element sa Tailwind CSS klasama
-u div elemente dodajemo tri komponente FormInput
-komponentama FormInput dodajemo prop type, name i label
-u komponentu FormContainer dodajemo komponentu SubmitButton sa prop text i className
-u funkciju createProfileAction() mozemo dodati uslov if za validaciju polja za varijablu firstName

71. Zod Library
-otvorimo web stranicu: https://zod.dev
-otvorimo link: https://www.npmjs.com/package/zod
-u terminalu instaliramo paket Zod
-u terminalu ukucamo komandu npm i zod
-u folderu utils kreiramo schemas.ts fajl
-u schemas.ts fajl dodajemo import * as z 
-dodajemo metodu z.object()
-vrijednost metode z.object() pohranjujemo u varijablu const profileSchema
-eksportujemo varijablu profileSchema
-u funkciju objekt() dodajemo konfiguracioni objekt za polja
-u objekt dodajemo validaciju za polja fill, lastName i username
-u folderu utils kreiramo actions.ts fajl
-u actions.ts fajl dodajemo direktivu 'use server'
-importujemo varijablu profileSchema
-funkciju createProfileAction() premjestamo iz komponente create/page.tsx u actions.ts fajl
-u funkciju createProfileAction() dodajemo blokove koda try - catch
-u bloku koda try dodajemo metodu Object.fromEntries(formData)
-vrijednost metode Object.fromEntries(formData) pohranjujemo u varijablu const rawData
-dodajemo metodu profileSchema.parse(rawData)
-vrijednost metode profileSchema.parse(rawData) pohranjujemo u varijablu const validateFields
-dodajemo izjavu return da je profil kreiran
-u blok koda catch dodajemo izjavu return da je doslo do greske
-u komponentu create/page.tsx importujemo funkciju createProfileAction 

72. Important Info !!!
-u bazi Supabase ne korisiti specijalne znakove za sifru

73. Supabase Setup
-otvorimo web stranicu: https://supabase.com/
-na web stranici Supabase kreiramo bazu podataka home-away
-kreiramo fajlove .env i .env.example
-u .env fajlu kreiramo env varijablu DB_PASSWORD
-u .env.example fajl dodajemo primjer varijable koju je potrebno dodati
-u .gitignore fajl dodajemo opciju .env za ignorisanje .env fajla

74. Prisma Setup
-otvorimo web stranicu: https://www.prisma.io/
-u terminalu instaliramo Prisma pakete
-u terminalu ukucamo komande npm install prisma --save-dev i npm install @prisma/client
-nakon sto instaliramo pakete u terminalu ukucamo komandu npx prisma init 
-nakon ove komande generisu se folder prisma i schema.prisma fajl
-u .env fajlu generisana env varijabla DATABASE_URL
-u folderu utils kreiramo db.ts fajl
-otvorimo link: https://www.prisma.io/docs/orm/more/help-and-troubleshooting/help-articles/nextjs-prisma-client-dev-practices#solution
-u db.ts fajl dodajemo kod iz dokumentacije

75. Connect Prisma and Supabase
-otvorimo link: https://supabase.com/partners/integrations/prisma
-na web stranici Supabase, otvorimo projekt i odaberemo opciju Connect
-u .env fajlu kreiramo varijablu DIRECT_URL
-u .env.example fajlu dodajemo primjer varijable koju je potrebno dodati
-u schema.prisma fajlu dodajemo model TestProfile
-u terminalu ukucamo komandu npx prisma db push
-u terminalu ukucamo komandu npx prisma studio
-u pretrazivacu otvorimo link: http://localhost:5555/

76. Prisma Crud Examples
-otvorimo link: https://www.prisma.io/docs/orm/prisma-client/queries/crud

77. Create Profile Model and createProfileAction
-u schema.prisma fajlu kreiramo model Profile
-u terminalu ukucamo komandu npx prisma db push
-u terminalu ukucamo komandu npx prisma studio
-otvorimo link: https://clerk.com/docs/users/metadata
-u actions.ts fajl importujemo instancu db iz db.ts fajla
-importujemo funkcije clerkClient i currentUser iz paketa Clerk
-importujemo funkciju redirect iz paketa Next
-u funkciji createProfileAction() kreiramo varijablu const user
-dodajemo metodu await db.profile.create()
-dodajemo uslov if (!user)
-u uslov if (!user) dodajemo metodu throw new Error()
-dodajemo metodu  await clerkClient.users.updateUserMetadata()
-u bloku koda catch dodajemo izjavu return objekt poruku 
-nakon bloka koda catch dodajemo funkciju redirect('/')

78. Fetch Profile Image Action
-u actions.ts fajlu kreiramo i eksportujemo asinhronu funkciju fetchProfileImage()
-u funkciju fetchProfileImage() dodajemo metodu await currentUser()
-vrijednost metode await currentUser() pohranjujemo u varijablu const user
-dodajemo uslov if (!user) return null
-dodajemo metodu await db.profile.findUnique()
-vrijednost metode await db.profile.findUnique() pohranjujemo u varijablu const profile
-dodajemo izjavu return profile?.profileImage
-u komponenta UserIcon.tsx importujemo i kreiramo funkciju fetchProfileImage
-vrijednost funkcije await fetchProfileImage() pohranjujemo u varijablu const profileImage
-funkciji UserIcon() dodajemo asinhronost
-dodajemo uslov if (profileImage)
-importujemo komponentu Image 
-u uslov if (profileImage) dodajemo komponentu Image
-komponenti Image dodajemo prop src, alt width, height i className
-u next.config.mjs fajl dodajemo objekt images

79. Modify Create Profile Page
-u komponentu create/page.tsx importujemo funkciju redirect iz paketa next/navigation
-importujemo i kreiramo funkciju currentUser iz paketa Clerk
-vrijednost funkcije await currentUser() pohranjujemo u varijablu const user
-funkciji CreateProfilePage() dodajemo asinhronost
-dodajemo uslov if (user?.privateMetadata?.hasProfile)
-u uslov if dodajemo funkciju redirect('/')

80. Fetch User Profile
-u actions.ts fajlu kreiramo i eksportujemo asinhronu funkciju fetchProfile()
-kreiramo asinhronu funkciju getAuthUser()
-u funkciju getAuthUser() dodajemo metodu await currentUser()
-vrijednost metode await currentUser() pohranjujemo u varijablu const user
-dodajemo uslov if (!user)
-u uslov if dodajemo metodu throw new Error()
-dodajemo uslov if (!user.privateMetadata.hasProfile)
-u uslov if if (!user.privateMetadata.hasProfile) dodajemo funkciju redirect()
-dodajemo izjavu return user
-u funkciju fetchProfile() dodajemo metodu await getAuthUser()
-vrijednost metode await getAuthUser() pohranjujemo u varijablu const user
-dodajemo metodu await db.profile.findUnique()
-vrijednost metode await db.profile.findUnique() pohranjujemo u varijablu const profile
-dodajemo uslov if (!profile)
-u uslov if (!profile) dodajemo izjavu return redirect()
-dodajemo izjavu return profile
-kreiramo i eksportujemo asinhronu funkciju updateProfileAction()
-funkciji updateProfileAction() dodajemo parametre prevState i formData
-parametru prevState dodajemo tip any
-parametru formData dodajemo tip FormData
-funkciji updateProfileAction() dodajemo tip Promise

81. Update Profile Page
-u komponentu profile/page.tsx importujemo funkcije updateProfileAction i fetchProfile iz foldera utils
-importujemo komponentu SubmitButton iz komponente Buttons.tsx
-importujemo komponente FormContainer i FormInput iz foldera form
-funkciji ProfilePage dodajemo asinhronost
-kreiramo funkciju await fetchProfile()
-vrijednost funkcije await fetchProfile() pohranjujemo u varijablu const profile
-u jsx-u dodajemo komponentu FormContainer sa otvorenim i zatvorenim tagom
-komponenti FormContainer dodajemo prop action
-u prop action proslijedujemo funkciju updateProfileAction
-u komponentu FormContainer dodajemo tri komponente FormInput
-komponentama FormInput dodajemo prop type, name, label i defaultValue
-dodajemo komponentu SubmitButton sa prop text i className
-u prop defaultValue proslijedujemo varijable profile.firstName, profile.lastName i profile.username
-u actions.ts fajl importujemo funkciju revalidatePath() iz paketa Next
-u funkciju updateProfileAction() dodajemo metodu await getAuthUser()
-vrijednost metode await getAuthUser() pohranjujemo u varijablu const user
-dodajemo blokove koda try - catch
-u bloku koda try kreiramo varijable const rawData i const validatedFields
-dodajemo metodu await db.profile.update()
-dodajemo funkciju revalidatePath()
-dodajemo izjavu return objekt poruku da su izmjene informacija profila bile uspjesne
-u blok koda catch dodajemo izjavu return objekt poruku da je doslo do greske
-kreiramo funkciju renderError() sa parametrom error sa tipom unknown
-funkciji renderError() dodajemo tip objekt message: string
-dodajemo izjavu return objekt poruku da je doslo do greske
-u funkciju createProfileAction(), u blok koda catch dodajemo funkciju renderError()
-u funkciju updateProfileAction(), u blok koda catch dodajemo funkciju renderError()

82. Zod SafeParse Method
-u actions.ts fajlu u funkciju updateProfileAction(), u blok koda try umjesto metode parse() dodajemo metodu safeParse()
-dodajemo uslov if (!validatedFields.success)
-u uslovu if (!validatedFields.success) kreiramo varijablu const errors
-dodajemo metodu throw new Error()
-u schemas.ts fajlu, u funkcije min() dodajemo objekte message

83. ValidateWithZodSchema - Helper Function
-u schemas.ts fajl importujemo tip ZodSchema iz paketa zod
-kreiramo i eksportujemo funkciju validateWithZodSchema<T>() sa parametrima schema i data
-parametru schema dodajemo tip ZodSchema<T>
-parametru data dodajemo tip unknown
-u funkciji validateWithZodSchema() dodajemo metodu schema.safeParse(data)
-vrijednost metode schema.safeParse(data) pohranjujemo u varijablu const result
-dodajemo uslov if (!result.success)
-u uslovu if (!result.success) kreiramo varijablu const errors
-dodajemo metodu throw new Error()
-nakon uslova if dodajemo izjavu return result.data
-u actions.ts fajl importujemo funkciju validateWithZodSchema()
-u funkciju updateProfileAction() dodajemo funkciju validateWithZodSchema()
-funkciji validateWithZodSchema() dodajemo dva argumenta profileSchema i rawData
-vrijednost funkcije validateWithZodSchema() pohranjujemo u varijablu const validatedFields
-ponovimo isti postupak u funkciji createProfileAction()

84. Image Input
-u folderu components kreiramo komponentu ImageInput()
-importujemo komponente Label i Input iz foldera ui
-u jsx-u kreiramo roditelj div element
-u div element dodajemo komponente Label i Input
-kreiramo varijablu const name
-komponenti Label dodajemo prop htmlFor i className
-komponenti Input dodajemo prop id, name, type, required, accept i className

85. Image Input Container
-u komponenti Buttons.tsx kreiramo tip BtnSize
-u tip SubmitButtonProps dodajemo polje size i tip btnSize
-funkciji SubmitButton() dodajemo parametar size
-u jsx-u komponenti Button dodajemo prop size
-u prop size proslijedujemo vrijednost parametra size
-u folderu form kreiramo komponentu ImageInputContainer.tsx
-u komponentu ImageInputContainer.tsx dodajemo direktivu 'use client'
-kreiramo tip ImageInputContainerProps
-importujemo tip actionFunction iz foldera utils
-funkciji ImageInputContainer() dodajemo parametar props sa tipom ImageInputContainerProps
-iz parametra props destruktuiramo varijable const { image, name, action, text }
-importujemo i kreiramo funkciju useState()
-vrijednost funkcije useState() pohranjujemo u varijable const [isUpdateFormVisible, setUpdateFormVisible]
-importujemo React ikonicu komponentu LuUser2
-komponenti LaUser2 dodajemo prop className i Tailwind CSS klase
-kreiramo varijablu const userIcon
-u jsx-u, u roditelj div element dodajemo ternarni uslov za varijablu image
-importujemo komponentu Image
-u prvi dio ternarnog uslova dodajemo komponentu Image, dok u drugi dodajemo varijablu userIcon
-komponenti Image dodajemo prop src, alt, width, height i className
-importujemo komponentu Button iz komponente ui/button.tsx
-nakon ternarnog uslova, dodajemo komponentu Button sa otvorenim i zatvorenim tagom
-komponenti Button dodajemo prop variant, size i dogadaj onClick
-u dogadaj onClick proslijedujemo anonimnu funkciju 
-u anonimnu funkciju proslijedujemo funkciju setUpdateFormVisible
-u komponentu Button dodajemo vrijednost varijable text
-importujemo komponente FormContainer.tsx i ImageInput.tsx
-dodajemo uslov {isUpdateFormVisible && (<div>...</div>)}
-u div element dodajemo komponentu FormContainer sa otvorenim i zatvorenim tagom
-komponenti FormContainer dodajemo prop action
-u komponentu FormContainer dodajemo prop props.children
-u prop action proslijedujemo funkciju action
-dodajemo komponente ImageInput i SubmitButton
-komponenti SubmitButton dodajemo prop size
-u actions.ts fajlu kreiramo i eksportujemo asinhronu funkciju updateProfileImageAction()
-funkciji updateProfileImageAction() dodajemo parametre prevState i formData
-parametru prevState dodajemo tip any
-parametru formData dodajemo tip FormData
-funkciji updateProfileImageAction() dodajemo tip Promise<>
-u funkciju dodajemo izjavu return objekt poruku da je slika uspjesno izmijenjana
-u komponentu profile/page.tsx importujemo funkciju updateProfileImageAction
-importujemo komponentu ImageInputContainer.tsx iz foldera form
-u div element dodajemo komponentu ImageInputContainer
-komponenti ImageInputContainer dodajemo prop image, name, action i text
-u prop image proslijedujemo vrijednost varijable profile.profileImage
-u prop name proslijedujemo vrijednost varijable profile.username
-u prop action proslijedujemo vrijednost funkcije updateProfileImageAction

86. Image Zod Validation
-u schemas.ts fajlu kreiramo i eksportujemo varijablu const imageSchema
-kreiramo funkciju validateFile()
-u metodu z.object() dodajemo opciju image:validatedFile()
-u funkciji validatedFile() kreiramo varijable const maxUploadSize i const acceptedFilesTypes
-u izjavi return dodajemo varijabli z metode instanceof() i refine()
-u actions.ts fajl importujemo varijablu imageSchema
-u funkciji updatePropertyAction() kreiramo varijable const image i const validatedFields

87. Supabase Bucket and Keys
-na web stranici Supabase otvorimo opciju Storage
-u opciji Storage odaberemo opciju New Bucket
-kreiramo bucket home-away
-odaberemo opciju Policy 
-u opciji Policy odaberemo opciju INSERT
-u .env fajlu kreiramo dvije varijable SUPABASE_URL i SUPABASE_KEY
-u .env.example fajl dodajemo primjer varijabli koje je potrebno dodati

88. Supabase Upload Image
-otvorimo link: https://www.npmjs.com/package/@supabase/supabase-js
-u terminalu instaliramo paket Supabase Js
-u terminalu ukucamo komandu npm install @supabase/supabase-js
-u folderu utils kreiramo supabase.ts fajl
-u supabase.ts fajlu importujemo i kreiramo funkciju createClient
-kreiramo varijable const bucket, const url i const key
-funkciji createClient() dodajemo argumente url i key
-vrijednost funkcije createClient() pohranjujemo u varijablu const supabase
-kreiramo i eksportujemo asinhronu funkciju uploadImage() sa parametrom image
-parametru image dodajemo tip File
-u funkciji uploadImage() kreiramo varijable const timestamp i const newName
-dodajemo metodu await supabase.storage
-vrijednost metode await supabase.storage pohranjujemo u destruktuiranu varijablu const { data }
-dodajemo uslov if (!data) 
-dodajemo izjavu return supabase.storage

89. Update Profile Image Action - Complete
-u actions.ts fajl importujemo funkciju uploadImage() iz supabase.ts fajla
-u funkciji updateProfileImageAction() kreiramo varijablu const user
-dodajemo blokova koda try - catch
-u blok koda try dodajemo varijable const image i const validatedFields
-dodajemo metodu await uploadImage()
-vrijednost metode await uploadImage() pohranjujemo u varijablu const fullPath
-dodajemo metodu await db.profile.update()
-dodajemo funkciju revalidatePath()
-dodajemo izjevu return objekt poruku
-u blok koda catch dodajemo izjavu return i funkciju renderError()
-otvorimo link: https://stackoverflow.com/questions/64909447/got-an-error-invalid-src-prop-here-is-a-link-on-next-image-hostname-loca
-u next.config.mjs fajl dodajemo konfiguracioni objekt za Supabase sliku

90. Property Schema
-u schema.prisma fajlu kreiramo model Property
-modelu Profile dodajemo opciju properties
-u terminalu ukucamo komandu npx prisma db push
-u terminalu ukucamo komandu npx prisma studio

91. Create Property Page - Setup
-u schemas.ts fajlu kreiramo i eksportujemo varijablu propertySchema za validaciju polja za imovinu
-u actions.ts fajl importujemo varijablu propertySchema
-kreiramo i eksportujemo asinhronu funkciju createPropertyAction()
-funkciji createPropertyAction() dodajemo parametre prevState sa tipom any i formData sa tipm FormData
-funkciji createPropertyAction() dodajemo tip Promise<>
-u funkciji createBookingAction() kreiramo varijablu const user
-dodajemo blkove koda try - catch
-u bloku koda try kreiramo varijable const rawData i const validatedFields
-u blok koda catch dodajemo izjavu return renderError()
-u folderu rentals kreiramo komponentu page.tsx
-u jsx-u kreiramo section element kao roditelj element
-u section elementu kreiramo h1 i div element sa Tailwind CSS klasama
-importujemo komponente FormContainer.tsx i FormInput.tsx
-importujemo komponentu SubmitButton iz komponente Buttons.tsx
-importujemo funkciju createPropertyAction
-u div element dodajemo komponentu FormContainer sa otvorenim i zatvorenim tagom
-komponenti FormContainer dodajemo prop action
-u prop action proslijedujemo funkciju createPropertyAction
-u komponenti FormContainer kreiramo div element sa Tailwind CSS klasama
-u div element dodajemo dvije komponente FormInput
-komponentama FormInput dodajemo prop name, type, label i defaultValue
-dodajemo komponentu SubmitButton sa prop text i className

92. Price Input
-u folderu form kreiramo komponentu PriceInput.tsx
-u komponentu PriceInput.tsx importujemo komponente Label i Input iz foldera ui
-kreiramo varijablu const name
-u jsx-u kreiramo roditelj div element sa Tailwind CSS klasom
-u div element dodajemo komponentu Label sa otvorenim i zatvorenim tagom
-komponenti Label dodajemo prop htmlFor i className
-dodajemo komponentu Input prop id, type, name, min, defaultValue i required
-kreiramo tip FormInputNumberProps
-funkciji PriceInput() dodajemo parametar destruktuirani prop defaultValue
-parametru defaultValue dodajemo tip FormInputNumberProps
-u komponentu create/page.tsx importujemo komponentu PriceInput.tsx

93. Categories Input
-u folderu utils kreiramo categories.ts fajl
-u categories.ts fajl importujemo React ikonice iz paketa React Icons
-kreiramo tip Category
-kreiramo i eksportujemo tip CategoryLabel
-kreiramo i eksportujemo varijablu niz const categories
-varijabli const categories dodajemo tip Category[]
-u folderu form kreiramo komponentu CategoriesInput.tsx
-u komponentu CategoriesInput.tsx importujemo niz categories iz categories.ts fajla
-importujemo komponentu Label iz komponente ui/label.tsx
-importujemo Shadcn komponente iz komponente ui/select.tsx
-kreiramo varijablu const name 
-funkciji CategoriesInput() dodajemo parametar destruktuirani prop defaultValue
-u jsx-u kreiramo roditelj div element sa Tailwind CSS klasom
-u div element dodajemo komponentu Label sa prop htmlFor i className
-u div element dodajemo komponentu Select sa otvorenim i zatvorenim tagom
-komponenti Select dodajemo prop defaultTheme, name i required
-u komponentu Select dodajemo komponentu SelectTrigger sa otvorenim i zatvorenim tagom
-komponenti SelectTrigger dodajemo prop id
-u komponentu SelectTrigger dodajemo komponentu SelectValue
-u komponentu Select dodajemo komponentu SelectContent sa otvorenim i zatvorenim tagom
-u komponentu SelectContent dodajemo metodu categories.map()
-u funkciju map() dodajemo komponentu SelectItem sa prop key i value
-u komponenti SelectItem kreiramo span element sa Tailwind CSS klasama
-u komponentu create/page.tsx importujemo komponentu CategoriesInput.tsx

94. Description Input
-u folderu form kreiramo komponentu TextAreaInput.tsx
-u komponentu TextAreaInput.tsx importujemo komponente Label i Textarea iz foldera ui
-kreiramo tip TextAreaInputProps
-funkciji TextAreaInput() dodajemo parametre destruktuirane prps name, labelText i defaultValue
-parametrima dodajemo tip TextAreaInputProps
-u jsx-u kreiramo div roditelj element sa Tailwind CSS klasom
-u div element dodajemo komponentu Label sa prop htmlFor i className
-dodajemo komponentu Textarea sa prop id, name, defaultValue, rows, required i className
-kreiramo varijablu const tempDefaultDescription
-u komponentu create/page.tsx importujemo komponentu TextAreaInput.tsx
-u jsx-u komponenti TextAreaInput dodajemo prop name i labelText

95. Countries Input
-otvorimo link: https://www.npmjs.com/package/world-countries
-u terminalu instaliramo paket World Countries
-u terminalu ukucamo komandu npm i world-countries
-u folderu utils kreiramo countries.ts fajl
-u countries.ts fajl importujemo instancu countries
-dodajemo metodu countries.map()
-vrijednost metode countries.map() pohranjujemo u varijablu const formattedCountries
-eksportujemo varijablu const formattedCountries
-kreiramo i eksportujemo funkciju findCountryByCode() sa parametrom code
-parametru code dodajemo tip string
-u funkciju findCountryByCode() dodajemo izjavu return formattedCountries.find()
-u folderu form kreiramo komponentu CountriesInput.tsx
-u komponentu CountriesInput.tsx importujemo komponentu Label iz komponente ui/label.tsx
-importujemo funkciju formattedCountries iz foldera utils
-importujemo Shadcn iz komponente ui/select.tsx
-kreiramo varijablu const name
-kreiramo roditelj div element sa Tailwind CSS klasom
-u div element dodajemo komponentu Label sa prop htmlFor i className
-dodajemo komponentu Select sa otvorenim i zatvorenim tagom
-komponenti Select dodajemo prop defaultValue, name i required
-u komponentu Select dodajemo komponentu SelectTrigger sa otvorenim i zatvorenim tagom
-komponenti SelectTrigger dodajemo prop id
-u komponentu SelectTrigger dodajemo komponentu SelectValue
-u komponentu Select dodajemo komponentu SelectContent sa otvorenim i zatvorenim tagom
-u komponentu SelectContent dodajemo metodu formattedCountries.map()
-u funkciju map() dodajemo komponentu SelectItem sa otvorenim i zatvorenim tagom
-komponenti SelectItem dodajemo prop key i value
-u komponenti SelectItem kreiramo span element sa Tailwind CSS klasama
-u komponentu create/page.tsx dodajemo komponente CountriesInput.tsx i ImageInput.tsx

Countries Input - fixed
-u terminalu instaliramo paket React World Flags
-u terminalu ukucamo komandu npm i react-world-flags
-kreiramo folder types i react-world-flags.d.ts fajl
-u react-world-flags.d.ts fajlu kreiramo interfejs FlagProps
-kreiramo varijablu const Flag sa tipom React.FC<FlagProps>
-varijablu Flag eksportujemo kao default
-u komponentu CountriesInput.tsx importujemo komponentu Flags iz paketa React World Flags

96. Counter Input
-u folderu form kreiramo komponentu CounterInput.tsx
-u komponentu CounterInput.tsx importujemo i kreiramo funkciju useState
-importujemo React ikonice LuMinus i LuPlus iz paketa React Icons
-importujemo komponente Card, CardHeader i Button iz foldera ui
-dodajemo direktivu 'use client'
-funkciji CounterInput() dodajemo parametre destruktuirane prop detail i defaultValue
-parametrima dodajemo tipove
-vrijednost funkcije useState() pohranjujemo u varijable const [count, setCount] 
-kreiramo funkcije increaseCount() i decreaseCount()
-u jsx-u dodajemo komponentu Card sa otvorenim i zatvorenim tagom
-komponenti Card dodajemo Tailwind CSS klasu
-u komponentu Card dodajemo komponentu CardHeader sa otvorenim i zatvorenim tagom
-komponenti CardHeader dodajemo Tailwind CSS klase
-u komponenti CardHeader kreiramo div elemente sa Tailwind CSS klasama
-u div elementu kreiramo dva div elementa
-u drugom div elementu kreiramo h2 i p elemente
-u treci div element dodajemo komponente Button
-u komponentu Button dodajemo komponentu LuMinus
-komponenti Button dodajemo prop, variant, size, type i dogadaj onClick
-u dogadaj onClick proslijedujemo funkciju decreaseCount
-kreiramo span element sa Tailwind klasama
-u span element dodajemo vrijednost varijable count
-nakon span elementa dodajemo jos jednu komponentu Button 
-komponenti Button dodajemo prop, variant, size, type i dogadaj onClick
-u dogadaj onClick proslijedujemo funkciju increaseCount
-u komponentu Button dodajemo komponentu LuPlus
-u komponentu create/page.tsx importujemo komponentu CounterInput.tsx
-u jsx-u kreiramo h3 element sa Tailwind CSS klasama
-dodajemo cetiri komponente CounterInput sa prop detail
-u komponenti CounterInput.tsx kreiramo input element sa prop type, name i value

97. Amenities Input
-u folderu utils kreiramo amenities.ts fajl
-u amenities.ts fajl importujemo tip IconType iz paketa React Icons
-importujemo React ikonice iz paketa React Icons
-kreiramo varijablu const amenities sa tipom Amenity[]
-eksportujemo varijablu const amenities
-kreiramo komponentu AmenitiesInput.tsx
-u komponentu AmenitiesInput.tsx dodajemo direktivu 'use client'
-importujemo i kreiramo funkciju useState
-importujemo komponentu Checkbox iz komponente ui/checkbox.tsx
-importujemo varijablu amenities i tip Amenity
-funkciji AmenitiesInput() dodajemo parametar destruktuirani prop defaultValue 
-parametru defaultValue dodajemo tip Amenity
-vrijednost funkcije useState() pohranjujemo u varijable const [selectedAmenities, setSelectedAmenities] 
-funkciji useState() dodajemo tip <Amenity[]>
-kreiramo funkciju handleChange() sa parametrom amenity
-parametru amenity dodajemo tip Amenity
-u funkciju handleChange() dodajemo funkciju setSelectedAmenities()
-u jsx-u kreiramo section element kao roditelj element
-u section element kreiramo input element 
-input elementu dodajemo prop type, name i value
-kreiramo div element sa Tailwind CSS klasama
-u div element dodajemo metodu selectedAmenities.map()
-u funkciji map() kreiramo div element sa Tailwind CSS klasama
-u div elementu kreiramo label element i dodajemo komponentu Checkbox
-komponenti Checkbox dodajemo prop id, checked i onCheckedChange
-u prop onCheckedChange proslijedujemo anonimnu funkciju 
-u anonimnu funkciju proslijedujemo funkciju handleChange(amenity)
-label elementu dodajemo prop htmlFor i className
-u label element dodajemo ime i ikonicu
-u komponentu create/page.tsx importujemo komponentu AmenitiesInput.tsx
-u jsx-u kreiramo element h3 Amenities
-dodajemo komponentu AmenitiesInput ispod h3 elementa

98. Create Property
-u folder public dodan folder images sa slikama
-u actions.ts fajlu, u funkciji createProfileAction(), u bloku koda try kreiramo tri varijable const file, const validatedFile i const fullPath
-dodajemo metodu await db.property.create()
-nakon blokova koda try - catch dodajemo funkciju redirect('/')
-u terminalu ukucamo komandu npx prisma studio

99. Fetch Properties
-u types.ts fajlu kreiramo i eksportujemo tip PropertyCardProps
-u actions.ts fajl kreiramo i eksportujemo asinhronu funkciju fetchProperties()
-u funkciju fetchProperties() dodajemo metodu await db.property.findMany()
-vrijednost metode await db.property.findMany() pohranjujemo u varijablu const properties
-u funkciju findMany() dodajemo konfiguracioni objekt
-u konfiguracioni objekt dodajemo metodu select
-funkciji fetchProperties() dodajemo parametre destruktuirane prop search i category
-parametrima search i category dodajemo tipove
-u funkciju findMany(), u konfiguracioni objekt dodajemo metode where i orderBy
-dodajemo izjavu return properties

100. Home Page - Setup
-u folderu components kreiramo cetiri komponente CategoriesList.tsx, EmptyList.tsx, PropertiesContainer.tsx i PropertiesList.tsx
-u komponentu app/page.tsx importujemo komponente CategoriesList.tsx i PropertiesContainer.tsx
-u jsx-u kreiramo section roditelj element
-u section element dodajemo komponente CategoriesList i PropertiesContainer
-funkciji HomePage() dodajemo parametar destruktuirani prop searchParams
-parametru searchParams dodajemo tipove
-u pretrazivacu otvorimo link: http://localhost:3000/?search=someValue
-u jsx-u komponentama CategoriesList i PropertiesContainer dodajemo prop category i search

101. Categories List
-otvorimo link: https://ui.shadcn.com/docs/components/scroll-area
-u komponenti CategoriesList.tsx, funkciji CategoriesList() dodajemo parametre destruktuirane prop category i search
-parametrima dodajemo tipove
-importujemo komponentu Link
-importujemo komponente ScrollArea i ScrollBar iz komponente ui/scroll-area.tsx
-importujemo niz categories iz foldera utils
-kreiramo varijablu const searchTerm
-u jsx-u kreiramo section roditelj element
-u section element dodajemo komponentu ScrollArea sa otvorenim i zatvorenim tagom
-komponenti ScrollArea dodajemo prop className
-u komponenti ScrollArea kreiramo div element sa Tailwind CSS Flex klasama
-u div element dodajemo metodu categories.map()
-u funkciji map() kreiramo varijablu const isActive
-u izjavu return dodajemo komponentu Link
-komponenti Link dodajemo prop key i href
-u prop href dodajemo dinamicki link
-u komponenti Link kreiramo article element sa Tailwind CSS klasama
-elementu article dodajemo dinamicku klasu isActive
-u element article dodajemo ikonicu i kreiramo p element
-u komponentu ScrollArea dodajemo komponentu ScrollBar
-komponenti ScrollBar dodajemo prop orientation

102. Empty List
-u komponentu EmptyList.tsx importujemo komponentu Link 
-importujemo komponentu Button iz komponente ui/button.tsx
-funkciji EmptyList() dodajemo parametre destruktuirane prop heading, message i btnText
-parametrima dodajemo tipove
-roditelj div elementu dodajemo Tailwind CSS klasu
-u div elementu kreiramo elemente h2 i p 
-u div element dodajemo komponentu Button
-komponenti Button dodajemo prop asChild, className i size
-u komponentu Button dodajemo komponentu Link

103. Properties Container
-u komponenti PropertiesContainer.tsx, funkciji PropertiesContainer() dodajemo parametre destruktuiramo prop category i search
-parametrima dodajemo tipove
-funkciji PropertiesContainer() dodajemo asinhronost
-importujemo i kreiramo funkciju fetchProperties iz foldera utils
-importujemo tip PropertyCardProps iz foldera utils
-importujemo komponente PropertiesList.tsx i EmptyList.tsx
-vrijednost funkcije await fetchProperties() pohranjujemo u varijablu const properties
-varijabli const properties dodajemo tip PropertyCardProps[]
-dodajemo uslov if (properties.length === 0)
-u uslov if dodajemo komponentu EmptyList
-komponenti EmptyList dodajemo prop heading, message i btnText
-u jsx-u dodajemo komponentu PropertiesList sa prop properties

104. PropertyCard - Setup
-kreiramo folder card i sest tsx komponenti: CountryFlagAndName.tsx, FavoriteToggleButton.tsx, 
 FavoriteToggleForm.tsx, LoadingCards.tsx, PropertyCard.tsx i PropertyRating.tsx
-u komponentu PropertiesList.tsx importujemo komponentu PropertyCard.tsx
-importujemo tip PropertyCardProps iz foldera utils
-funkciji PropertiesList() dodajemo parametar destruktuirani prop properties
-parametru properties dodajemo tip PropertyCardProps[]
-u jsx-u kreiramo roditelj section element
-u section element dodajemo metodu properties.map()
-u funkciju map() dodajemo komponentu PropertyCard sa prop key i property

105. PropertyCard - Structure
-u folderu utils kreiramo format.ts fajl
-u format.ts fajlu kreiramo i eksportujemo funkciju formatCurrency() sa parametrom amount
-parametru amount dodajemo tipove number | null
-u funkciji formatCurrency() kreiramo varijablu const value
-u return izjavu dodajemo metodu new Intl.NumberFormat()
-u komponentu PropertyCard.tsx importujemo komponente Image i Link
-importujemo tip PropertyCardProps i funkciju formatCurrency iz foldera utils
-funkciji PropertyCard() dodajemo parametar destruktuirani prop property
-parametru property dodajemo tip PropertyCardProps
-iz varijable property destruktuiramo varijable const { name, image, price, country, id: propertyId, tagline }
-u jsx-u kreiramo roditelj article element sa Tailwind CSS klasama
-u komponentu article dodajemo komponentu Link 
-komponenti Link dodajemo dinamicki prop href
-u komponenti Link kreiramo tri div elementa sa Tailwind CSS klasama
-u prvi div element dodajemo komponentu Image
-komponenti Image dodajemo prop src, fill, sizes, alt i className
-u drugom div elementu kreiramo h3 element
-u trecem div elementu kreiramo p element
-u p elementu kreiramo span element
-u span element dodajemo funkciju formatCurrency(price)
-u article elementu kreiramo div element sa Tailwind CSS klasama za favorite logiku

106. Property Rating
-u komponenti PropertyRating.tsx, funkciji PropertyRating() dodajemo parametre destruktuirane prop propertyId i inPage
-parametrima dodajemo tipove
-kreiramo varijable const rating i const count
-kreiramo varijable const className, countText i countValue
-u jsx-u kreiramo span element sa prop className
-importujemo React ikonicu FaStar
-u span element dodajemo komponentu FaStar, varijable rating i countValue

107. Favorites Toggle Button
-u komponentu FavoriteToggleButton.tsx importujemo React ikonicu FaHeart i komponentu Button
-funkciji FavoriteToggleButton() dodajemo parametar destruktuirani prop propertyId
-parametru propertyId dodajemo tip string
-u jsx-u dodajemo komponentu Button sa prop size, variant i className
-u komponentu Button dodajemo komponentu FaHeart
-u komponentu PropertyCard.tsx importujemo komponentu FavoriteToggleButton.tsx
-u jsx-u komponenti FavoriteToggleButton dodajemo prop propertyId

108. Country Name and Flag
-u komponentu CountryFlagAndName.tsx importujemo i kreiramo funkciju findCountryByCode iz foldera utils
-funkciji CountryFlagAndName() dodajemo parametar destruktuirani prop countryCode 
-parametru countryCode dodajemo tip string
-vrijednost funkcije findCountryByCode(countryCode) pohranjujemo u varijablu const validCountry
-kreiramo varijablu countryName
-u komponentu PropertyCard.tsx importujemo komponentu CountryFlagAndName.tsx
-u jsx-u komponenti CountryFlagAndName dodajemo prop countryCode

Country Name and Flag - fixed
-u komponentu CountryFlagAndName.tsx importujemo komponentu Flag iz paketa React World Flags
-u span element dodajemo komponentu Flag
-komponenti Flag dodajemo prop code i style

109. Loading Cards
-u pretrazivacu otvorimo link: https://ui.shadcn.com/docs/components/skeleton
-u komponentu LoadingCards.tsx importujemo komponentu Skeleton iz komponente ui/skeleton.tsx
-u jsx-u kreiramo section element sa Tailwind CSS klasama
-kreiramo i eksportujemo funkciju SkeletonCard()
-u funkciju SkeletonCard() dodajemo tri komponente Skeleton sa prop className
-u funkciju LoadingCards() dodajemo cetiri komponente SkeletonCard
-u komponentu app/page.tsx importujemo komponentu Suspense iz paketa React
-importujemo komponentu LoadingCards.tsx
-u jsx-u dodajemo komponentu Suspense sa otvorenim i zatvorenim tagom
-komponenti Suspense dodajemo prop fallback
-u prop fallback proslijedujemo komponentu LoadingCards
-u komponentu Suspense dodajemo komponentu PropertiesContainer

110. NavSearch Component
-otvorimo link: https://www.npmjs.com/package/use-debounce
-u terminalu instaliramo paket Use Debouce
-u terminalu ukucamo komandu npm i use-debounce
-u komponentu NavSearch.tsx importujemo funkcije useSearchParams, usePathname i useRouter iz paketa Next Navigation
-importujemo i kreiramo funkcije useDebouncedCallback iz paketa Use Debouce
-importujemo funkcije useState i useEffect iz paketa React
-vrijednost funkcije useSearchParams() pohranjujemo u varijablu const searchParams
-vrijednost funkcije usePathname() pohranjujemo u varijablu const pathname
-vrijednost funkcije useRouter() pohranjujemo u destruktuiranu varijablu const { replace }
-kreiramo varijablu search i set funkciju setSearch
-u jsx-u komponenti Input dodajemo prop onChange
-u prop onChange proslijedujemo anonimnu funkciju sa parametrom e
-u anonimnu funkciju proslijedujemo funcije setSearch
-kreiramo funkciju handleSearch() sa parametrom value
-parametru value dodajemo tip string
-u funkciji handleSearch() kreiramo varijablu const params
-dodajemo uslove if (value) i else
-u uslov else dodajemo metodu params.delete()
-nakon uslova if - else dodajemo funkciju replace()
-u funkciju handleSearch() dodajemo funkciju useDebouncedCallback()
-u dogadaj onChange dodajemo funkciju handleSearch()
-dodajemo funkciju useEffect() sa dva argumenta
-prvi argument je anonimna funkcija, a drugi argument je prazan niz
-u anonimnu funkcija dodajemo uslov if (!searchParams.get('search'))

111. Favorites SignIn Button
-u schema.prisma fajlu kreiramo model Prisma
-u modele Profile i Property dodajemo polje favorites
-u terminalu ukucamo komandu npx prisma db push
-u terminalu ukucamo komandu npx prisma studio
-u komponentu Buttons.tsx importujemo komponentu SignInButton iz paketa Clerk
-importujemo React ikonice FaRegHeart i FaHeart iz paketa React Icons
-kreiramo i eksportujemo funkciju CardSignInButton()
-u funkciju CardSignInButton() dodajemo komponentu SignInButton sa otvorenim i zatvorenim tagom
-komponenti SignInButton dodajemo prop mode
-u komponentu SignInButton dodajemo komponenta Button sa otvorenim i zatvorenim tagom
-komponenti Button dodajemo prop type, size, variant i className
-u komponentu Button dodajemo komponentu FaRegHeart
-u komponentu FavoriteToggleButton.tsx importujemo i kreiramo funkciju auth iz paketa Clerk
-importujemo komponentu CardSignInButton.tsx
-vrijednost funkcije auth() pohranjujemo u destruktuiranu varijablu const { userId }
-dodajemo uslov if (!userId)
-u uslov if (!userId) dodajemo komponentu CardSignInButton

112. Fetch Favorites
-u actions.ts fajlu kreiramo i eksportujemo asinhronu funkciju fetchFavoriteId()
-funkciji fetchFavoriteId() dodajemo parametar destruktuirani parametar propertyId sa tipom string
-u funkciji fetchFavoriteId() kreiramo varijablu const user
-dodajemo metodu await db.favorite.findFirst({})
-vrijednost metode await db.favorite.findFirst({}) pohranjujemo u varijablu const favorite
-u funkciju findFirst() dodajemo metode where i select
-dodajemo izjavu return favorite?.id || null
-kreiramo i eksportujemo asinhronu funkciju toggleFavoriteAction()
-u komponentu FavoriteToggleButton.tsx importujemo funkciju fetchFavoriteId
-funkciji FavoriteToggleButton() dodajemo asinhronost
-vrijednost funkcije await fetchFavoriteId() pohranjujemo u varijablu const favoriteId
-importujemo komponentu FavoriteToggleForm.tsx
-u jsx-u dodajemo komponentu FavoriteToggleForm umjesto komponentu Button
-komponenti FavoriteToggleForm dodajemo prop favoriteId i propertyId

113. Favorites Toggle Form
-u komponenti Buttons.tsx kreiramo i eksportujemo funkciju CardSubmitButton() sa parametrom destruktuirani prop isFavorite
-parametru isFavorite dodajemo tip boolean
-u funkciji CardSubmitButton(), iz funkcije useFormStatus() destruktuiramo varijablu const { pending }
-u jsx dodajemo komponentu Button sa prop type, size, variant i className
-u komponentu Button dodajemo ternarne operatore za varijable pending i isFavorite
-u komponentu FavoriteToggleForm.tsx dodajemo direktivu 'use client'
-importujemo funkcije usePathname i toggleFavoriteAction
-importujemo komponente FormContainer.tsx i CardSubmitButton iz komponente Buttons.tsx
-kreiramo tip FavoriteToggleFormProps
-funkciji FavoriteToggleForm() dodajemo parametre destruktuirane prop propertyId i favoriteId
-parametrima dodajemo tip FavoriteToggleFormProps
-kreiramo varijablu const pathname
-u jsx-u dodajemo komponentu FormContainer kao roditelj elemente
-u komponentu FormContainer dodajemo komponentu CardSubmitButton
-komponenti CardSubmitButton dodajemo prop isFavorite
-u prop isFavorite dodajemo ternarni uslov za varijablu favoriteId
-dodajemo metodu toggleFavoriteAction.bind()
-vrijednost metode toggleFavoriteAction.bind() pohranjujemo u varijablu const toggleAction
-komponenti FormContainer dodajemo prop action
-u prop action proslijedujemo funkciju toggleAction 
-u actions.ts fajlu, funkciji toggleFavoriteAction() dodajemo parametar prevState
-parametru prevState dodajemo tip
-destruktuiramo varijable const { propertyId, favoriteId, pathname } iz varijable prevState

114. Toggle Favorites - Functionality
-u actions.ts fajlu, u funkciji toggleFavoriteAction() vrijednost funkcije await getAuthUser() pohranjujemo u varijablu const user
-dodajemo blokove koda try - catch
-u blok koda try dodajemo uslov if (favoriteId) - else
-u uslov if (favoriteId) dodajemo metodu db.favorite.delete()
-u blok koda else dodajemo metodu await db.favorite.create()
-u return izjavu dodajemo ternarni operator za varijablu favoriteId
-dodajemo funkciju revalidatePath(pathname)
-u blok koda catch dodajemo izjavu return renderError(error)

115. Favorites Page
-otvorimo link: https://stackoverflow.com/questions/69274503/property-does-not-exist-when-i-want-to-use-model-added-in-prisma-schema
-u actions.ts fajlu kreiramo i eksportujemo asinhronu funkciju fetchFavorites()
-u funkciji fetchFavorites(), vrijednost funkcije getAuthUser() pohranjujemo u varijablu const user
-dodajemo metodu await db.favorite.findMany()
-vrijednost metode await db.favorite.findMany() pohranjujemo u varijablu const favorites
-u funkciju findMany() dodajemo metode where i select
-dodajemo izjavu return favorites.map()
-u folderu favorites kreiramo komponentu loading.tsx
-u komponentu loading dodajemo direktivu 'use client'
-importujemo komponentu LoadingCards.tsx
-u komponenti favorites/page.tsx, funkciji FavoritesPage() dodajemo asinhronost
-importujemo funkciju fetchFavorites() iz foldera utils
-dodajemo funkciju await fetchFavorites()
-vrijednost funkcije await fetchFavorites() pohranjujemo u varijablu const favorites
-dodajemo uslov if (favorites.length === 0)
-importujemo komponente EmptyList.tsx i PropertiesList.tsx
-u jsx-u dodajemo komponentu PropertiesList
-komponenti PropertiesList dodajemo prop properties

116. Property Details Page - Setup
-u actions.ts fajlu kreiramo i eksportujemo funkciju fetchPropertyDetails() sa parametrom id
-parametru id dodajemo tip string
-u return izjavu dodajemo metodu db.property.findUnique()
-u funkcija findUnique() dodajemo metode where i include
-u folderu properties kreiramo komponentu loading.tsx
-kreiramo folder [id]
-u [id] folderu kreiramo komponentu page.tsx
-u komponenti [id]/page.tsx kreiramo funkciju PropertyDetailsPage()
-funkciji PropertyDetailsPage() dodajemo destruktuirani parametar params sa tipom
-importujemo funkciju fetchPropertyDetails iz foldera utils
-importujemo funkciju redirect iz paketa Next Navigation
-u funkciju PropertyDetailsPage() dodajemo funkciju await fetchPropertyDetails()
-vrijednost funkcije await fetchPropertyDetails() pohranjujemo u varijablu const property
-dodajemo uslov if (!property)
-u uslov if (!property) dodajemo funkciju redirect()
-vrijednost varijable property pohranjujemo u destruktuirane varijabla const { baths, bedrooms, beds, guests }
-kreiramo varijablu const details
-u folderu properties izbrisemo komponentu page.tsx

117. Breadcrumbs Component
-otvorimo link: https://ui.shadcn.com/docs/components/breadcrumb
-u folderu components kreiramo folder properties i komponentu BreadCrumbs.tsx
-u komponenta BreadCrumbs.tsx importujemo komponente iz komponente ui/breadcrumb.tsx
-funkciji BreadCrumbs() dodajemo parametar destruktuirani prop sa tipom string
-u jsx-u dodajemo komponentu Breadcrumb kao roditelj element
-u komponentu Breadcrumb dodajemo komponentu BreadcrumbList sa otvorenim i zatvorenim tagom
-u komponentu BreadcrumbList dodajemo dvije komponente BreadcrumbItem i komponentu BreadcrumbSeparator
-u prvu komponentu BreadcrumbItem dodajemo komponentu BreadcrumbLink sa otvorenim i zatvorenim tagom
-u drugu komponentu BreadcrumbItem dodajemo komponentu BreadcrumbPage sa otvorenim i zatvorenim tagom
-u komponentu properties/[id]/page.tsx importujemo komponente BreadCrumbs.tsx i FavoriteToggleButton.tsx 
-u jsx-u kreiramo section roditelj element
-u section element dodajemo komponentu BreadCrumbs sa prop name
-u section element kreiramo elemente header, h2 i div sa Tailwind CSS klasama
-u div element dodajemo komponentu FavoriteToggleButton sa prop propertyId

118. Share Button Component
-otvorimo link: https://www.npmjs.com/package/react-share
-u terminalu instaliramo paket React Share sa komandom npm i react-share
-otvorimo link: https://ui.shadcn.com/docs/components/popover
-u folderu components/properties kreiramo komponentu ShareButton.tsx
-u komponentu ShareButton.tsx dodajemo direktivu 'use client'
-importujemo komponente TwitterShareButton, EmailShareButton, LinkedinShareButton, TwitterIcon, EmailIcon i LinkedinIcon iz paketa React Share
-importujemo komponente iz foldera ui
-funkciji ShareButton() dodajemo parametre destruktuirane prop propertyId i name
-parametrima dodajemo tipove
-u .env fajlu kreiramo env varijablu NEXT_PUBLIC_WEBSITE_URL
-u .env.local fajl dodajemo primjer varijable koju trebamo kreirati
-u komponenti ShareButton.tsx kreiramo varijable const url i const shareLink
-u jsx-u dodajemo komponentu Popover kao roditelj element
-u komponentu Popover dodajemo komponentu PopoverTrigger sa otvorenim i zatvorenim tagom
-komponenti PopoverTrigger dodajemo prop asChild
-u komponentu Popover dodajemo komponentu Button i komponentu LuShare2
-komponenti Button dodajemo prop variant, size i className
-u komponentu Popover dodajemo komponentu PopoverContent sa otvorenim i zatvorenim tagom
-komponenti PopoverContent dodajemo prop side, align, sideOffset i className
-u komponentu PopoverContent dodajemo komponente TwitterShareButton, EmailShareButton, LinkedinShareButton, TwitterIcon, EmailIcon i LinkedinIcon
-komponentama dodajemo prop url i title
-u komponentu properties/[id]/page.tsx importujemo komponentu ShareButton.tsx
-u div element dodajemo komponentu ShareButton sa prop name i propertyId

119. Image Container Component
-u folderu components/properties kreiramo komponentu ImageContainer.tsx
-u komponentu ImageContainer.tsx importujemo komponentu Link
-funkciji ImageContainer() dodajemo parametre destruktuirane prop mainImage i name
-parametrima dodajemo tipove string
-u jsx-u kreiramo section roditelj element sa Tailwind CSS klasama
-u section element dodajemo komponentu Image
-komponenti Image dodajemo prop src, fill, sizes alt, className i priority
-u komponentu properties/[id]/page.tsx importujemo komponentu ImageContainer.tsx i PropertyRating.tsx
-u jsx-u dodajemo komponentu ImageContainer sa prop mainImage i name
-ispod komponente ImageContainer kreiramo section element sa Tailwind CSS Grid klasama
-u section elementu kreiramo dva div elementa sa Tailwind CSS klasama
-u prvom div elementu kreiramo div element
-u taj div element kreiramo h2 element i dodajemo komponentu PropertyRating sa prop inPage i propertyId
-drugom div elementu u section elementu dodajemo Tailwind CSS klase

120. Calendar Component
-otvorimo link: https://www.npmjs.com/package/react-day-picker
-u terminalu instaliramo paket React Day Picker sa komandom npm i react-day-picker
-u folderu components/properties kreiramo komponentu BookingCalendar.tsx
-u komponentu BookingCalendar.tsx dodajemo direktivu 'use client'
-importujemo funkciju useState
-otvorimo link: https://ui.shadcn.com/docs/components/calendar
-importujemo komponentu Calendar iz komponente ui/calendar.tsx
-kreiramo varijablu const currentDate
-kreiramo varijablu objekt const defaultSelected sa tipom DateRange
-kreiramo state varijablu const range i set funkciju setRange
-funkciji useState() dodajemo tip <DateRange | undefined>
-u jsx-u dodajemo komponentu Calendar sa prop id, mode, defaultMonth, selected i onSelect
-u prop onSelect proslijedujemo funkciju setRange

121. Property Details Component
-u format.ts fajlu kreiramo i eksportujemo funkciju formatQuantity()
-u folderu components/properties kreiramo komponentu PropertyDetails.tsx
-u komponentu PropertyDetails.tsx importujemo funkciju formatQuantity iz foldera utils
-importujemo React ikonicu LuDot
-kreiramo tip PropertyDetailsProps
-funkciji PropertyDetails() dodajemo parametar destruktuirani prop details
-parametru details dodajemo tip PropertyDetailsProps
-u jsx-u kreiramo p roditelj element sa Tailwind CSS klasama
-u p elementu kreiramo cetiri span elementa
-u span elemente dodajemo funkciju formatQuantity()
-u prva tri span elementa dodajemo komponentu LuDot
-u komponentu properties/[id]/page.tsx importujemo komponentu PropertyDetails.tsx
-u jsx-u komponenti PropertyDetails dodajemo prop details

122. UserInfo Component
-u folderu components/properties kreiramo komponentu UserInfo.tsx
-u komponentu UserInfo.tsx importujemo komponentu Image
-kreiramo tip UserInfoProps
-funkciji UserInfo() dodajemo parametar destruktuirani prop profile
-parametru profile dodajemo tip UserInfoProps
-u jsx-u kreiramo article roditelj element sa Tailwind CSS klasama
-u article element dodajemo komponentu Image sa prop src, alt, width, height i className
-kreiramo div i p elemente sa Tailwind CSS klasama
-u komponenti properties/[id]/page.tsx kreiramo varijable const firstName i const profileImage
-importujemo komponentu UserInfo.tsx
-u jsx-u dodajemo komponentu UserInfo sa prop profile

123. Description Component
-u folderu components/properties kreiramo komponente Title.tsx i Description.tsx
-u komponenti Title.tsx, funkciji Title() dodajemo parametar destruktuirani prop text sa tipom text
-u jsx-u kreiramo h3 element sa Tailwind CSS klasama
-u komponentu Description.tsx dodajemo direktivu 'use client'
-importujemo funkciju useState
-importujemo komponente Title.tsx i komponentu Button iz komponente ui/button.tsx
-funkciji Description dodajemo parametar destruktuirani prop description sa tipom string
-kreiramo state varijablu const isFullDescriptionShown i set funkciju setIsFullDescriptionShown
-kreiramo varijable const words i const isLongDescription
-kreiramo funkciju toggleDescription()
-u funkciju toggleDescription() dodajemo funkciju setIsFullDescriptionShown()
-kreiramo varijablu const displayedDescription 
-u jsx-u kreiramo article roditelj element sa Tailwind CSS klasom
-u article element dodajemo komponentu Title sa prop text
-kreiramo p element sa Tailwind CSS klasama u kojem prikazujemo varijablu displayedDescription
-dodajemo uslov isLongDescription && (...) za prikazivanje komponente Button
-komponenti Button dodajemo prop variant, className i onClick
-u dogadaj onClick proslijedujemo funkciju toggleDescription
-u komponentu Button dodajemo uslov ternarni operator za varijablu isFullDescriptionShown
-u komponentu properties/[id]/page.tsx importujemo komponente Separator iz komponente ui/separator.tsx i Description.tsx
-u jsx-u komponenti Separator dodajemo prop className
-u jsx-u komponenti Description dodajemo prop description

124. Amenities Component
-u folderu components/properties kreiramo komponentu Amenities.tsx
-u komponentu Amenities.tsx importujemo tip Amenity
-importujemo komponentu Title.tsx
-importujemo React ikonicu LuFolderCheck
-funkciji Amenities() dodajemo parametar destruktuirani prop amenities sa tipom string
-kreiramo varijable const amenitiesList i const noAmenities
-varijabli amenitiesList dodajemo tip Amenity[]
-dodajemo uslov if (noAmenities)
-u jsx-u u roditelj div element dodajemo komponentu Title sa prop text
-ispod komponente Title kreiramo div element sa Tailwind CSS klasama
-u div element dodajemo metodu amenitiesList.map()
-u funkciju map() dodajemo uslov if (!amenity.selected) return null
-kreiramo div element sa Tailwind CSS klasama
-u div element dodajemo komponentu LuFolderCheck i kreiramo span element sa Tailwind CSS klasama
-u komponentu properties/[id]/page.tsx importujemo komponentu Amenities.ts
-u jsx-u dodajemo komponentu Amenities sa prop amenities

125. Property Map Component
-otvorimo web stranicu: https://react-leaflet.js.org/
-otvorimo link: https://www.npmjs.com/package/leaflet
-otvorimo link: https://www.npmjs.com/package/react-leaflet
-otvorimo link: https://www.npmjs.com/package/@types/leaflet
-u terminalu instaliramo Leaflet pakete
-u terminalu ukucamo komande: npm install react react-dom leaflet react-leaflet i npm install -D @types/leaflet
-u folderu components/properties kreiramo komponentu PropertyMap.tsx
-u komponentu PropertyMap.tsx dodajemo direktivu 'use client'
-importujemo komponente  MapContainer, TileLayer, Marker i ZoomControl iz paketa React Leaflet
-importujemo i kreiramo funkciju icon() iz paketa Leaflet
-vrijednost funkcije icon() pohranjujemo u varijablu const markerIcon
-importujemo funkciju findCountryByCode iz foldera utils
-importujemo komponente Title.tsx i CountryFlagAndName.tsx
-importujemo CSS stil za Leaflet biblioteku
-funkciji PropertyMap() dodajemo parametar destruktuirani prop countryCode sa tipom string
-kreiramo varijable const defaultLocation i const location
-u roditelj div elementu kreiramo div element
-u taj div element dodajemo komponente Title i CountryFlagAndName
-komponenti Title dodajemo prop text
-komponenti CountryFlagAndName dodajemo prop countryCode
-u roditelj div element dodajemo komponentu MapContainer sa otvorenim i zatvorenim tagom
-komponenti MapContainer dodajemo prop scrollWheelZoom, zoomControl, className, center i zoom
-u komponentu MapContainer dodajemo komponente TileLayer, ZoomControl i Marker
-komponenti TileLayer dodajemo prop attribution i url
-komponenti ZoomControl dodajemo prop position
-komponenti Marker dodajemo prop position i icon
-u komponentu properties/[id]/page.tsx importujemo komponentu Skeleton iz komponente ui/skeleton.tsx
-importujemo i kreiramo funkciju dynamic iz Next Dynamic paketa
-vrijednost funkcije dynamic pohranjujemo u varijablu komponentu const DynamicMap
-u jsx-u dodajemo komponentu DynamicMap sa prop countryCode

126. Supabase Bug !!!

127. Deploy Application on Vercel
-otvorimo link: https://favicon.io/favicon-converter/
-u folder app dodajemo nasu narandzastu sator sliku favicon.ico
-u package.json fajlu, u objekt scripts dodajemo npx prisma generate u komandu build
-otvorimo web stranicu: https://vercel.com/
-otvorimo link: https://github.com/shadcn-ui/ui/issues/5706

128. Reviews Model
-u schema.prisma fajlu kreiramo model Review
-u modele Property i Profile dodajemo polje reviews
-u terminalu ukucamo komandu npx prisma db push
-u terminalu ukucamo komandu npx prisma studio
-u actions.ts fajlu kreiramo i eksportujemo cetiri asinhrone funkcije: createReviewAction(), fetchPropertyReviews(), fetchPropertyReviewsByUser() i deleteReviewAction()
-u folderu components kreiramo folder reviews
-u folderu reviews kreiramo pet tsx komponenti: Comment, PropertyReviews, Rating, SubmitReview i ReviewCard

129. RatingInput Component
-otvorimo link: https://ui.shadcn.com/docs/components/select
-otvorimo link: https://ui.shadcn.com/docs/components/label
-u folderu components/form kreiramo komponentu RatingInput.tsx
-u komponentu RatingInput.tsx import komponentu Label iz komponente ui/label.tsx
-importujemo komponente  Select, SelectContent, SelectItem, SelectTrigger, SelectValue iz komponente ui/select.tsx
-funkciji RatingInput() dodajemo parametre destruktuirane prop name i labelText
-parametrima dodajemo tipove
-u funkciju RatingInput() dodajemo metodu Array.from()
-vrijednost metode Array.from() pohranjujemo u varijablu const numbers
-u jsx-u roditelj div elementu dodajemo Tailwind CSS klase
-u div element dodajemo elemente Label i Select 
-elementu Label dodajemo prop html i className
-komponenti Select dodajemo prop defaultValue, name i required
-u komponentu Select dodajemo komponente SelectTrigger i SelectContent
-u komponentu SelectTrigger do komponentu SelectValue
-u komponentu SelectContent dodajemo metodu numbers.map()
-u funkciju map() dodajemo komponentu SelectItem sa prop key i value

130. SubmitReviews Component
-u komponentu properties/[id]/page.tsx importujemo komponentu SubmitReview.tsx
-u jsx-u dodajemo komponentu SubmitReview sa prop propertyId
-u komponentu SubmitReview.tsx dodajemo direktivu 'use client'
-importujemo funkciju useState iz paketa React
-importujemo funkciju createReviewAction iz foldera utils
-importujemo komponente Button i Card iz foldera ui
-importujemo komponentu SubmitButton iz komponente Buttons.tsx
-importujemo komponente FormContainer.tsx, RatingInput.tsx i TextAreaInput.tsx iz foldera form
-funkciji SubmitReview() dodajemo parametar destruktuirani prop propertyId sa tipom string
-kreiramo state varijablu const isReviewFormVisible i set funkciju setIsReviewFormVisible
-u roditelj div element dodajemo komponente Button i Card
-komponenti Button dodajemo prop onClick
-u prop onClick proslijedujemo anonimnu funkciju
-u anonimnu funkciju proslijedujemo funkciju setIsReviewFormVisible
-dodajemo uslov logicki operator isReviewFormVisible && za prikazivanje komponente Card
-komponenti Card dodajemo prop className i Tailwind CSS klase
-u komponentu Card dodajemo komponentu FormContainer
-komponenti FormContainer dodajemo prop action
-u prop action proslijedujemo vrijednost funkcije createReviewAction
-kreiramo input element sa atributima type, name i value
-u komponentu FormContainer dodajemo komponentu RatingInput sa prop name
-dodajemo komponentu TextAreaInput sa prop name, labelText i defaultValue
-dodajemo komponentu SubmitButton sa prop text i className

131. SubmitReview Functionality
-u schemas.ts fajlu kreiramo i eksportujemo varijablu const createReviewSchema
-u actions.ts fajl importujemo varijablu createReviewSchema
-funkciji createReviewAction() dodajemo parametre prevState i formData sa tipovima
-kreiramo varijablu const user 
-dodajemo blokove koda try - catch
-u bloku koda try kreiramo varijable const rawData i const validatedFields
-dodajemo metodu await db.review.create()
-dodajemo funkciju revalidatePath()
-u izjavu return dodajemo objekt poruku da je recenzija uspjesno poslana
-u blok koda catch dodajemo funkciju renderError()

132. Fetch Reviews
-u actions.ts fajlu, funkciji fetchPropertyReviews() dodajemo parametar propertyId sa tipom string
-dodajemo metodu await db.review.findMany()
-vrijednost metode await db.review.findMany() pohranjujemo u varijablu const reviews
-u objekt findMany() dodajemo objekt where, select i orderBy
-u objekt select dodajemo objekt profile
-dodajemo izjavu return reviews

133. Render Reviews 
-u komponentu properties/[id]/page.tsx importujemo komponentu PropertyReviews.tsx
-u jsx-u komponenti PropertyReviews dodajemo prop propertyId
-u komponentu PropertyReviews.tsx importujemo funkciju fetchPropertyReviews iz foldera utils
-importujemo komponente Title.tsx i ReviewCard.tsx
-funkciji PropertyReviews() dodajemo parametar destruktuirani prop propertyId sa tipom string
-funkciji PropertyReviews() dodajemo asinhronost
-dodajemo metodu await fetchProperties()
-vrijednost metode await fetchProperties() pohranjujemo u varijablu const reviews
-dodajemo uslov if (reviews.length < 1)
-u roditelj div element dodajemo komponentu Title sa prop text
-kreiramo div element sa Tailwind CSS Grid klasama
-u div element dodajemo metodu reviews.map()
-u funkciji map() destruktuiramo varijable const { comment, rating } iz varijable review
-destruktuiramo varijable const { firstName, profileImage } iz varijable review.profile
-kreiramo varijablu objekt const reviewInfo
-u izjavu return dodajemo komponentu ReviewCard sa prop key i reviewInfo

134. ReviewCard Component
-otvorimo link: https://ui.shadcn.com/docs/components/card
-u komponentu ReviewCard.tsx importujemo komponente Card, CardContent i CardHeader iz komponentu ui/card.tsx
-importujemo komponenta Rating.tsx i Comment.tsx
-importujemo komponentu Image
-kreiramo tip ReviewCardProps
-funkciji ReviewCard() dodajemo parametre destruktuirane prop reviewInfo i children
-parametrima dodajemo tip ReviewCardProps
-u jsx-u dodajemo komponentu Card kao roditelj element
-komponenti Card dodajemo prop className
-u komponentu Card dodajemo komponente CardHeader i CardContent
-u komponenti CardHeader kreiramo div element sa Tailwind CSS Flex klasama
-u div elementu sa Tailwind CSS Flex klasama dodajemo komponentu Image i kreiramo div element sa Tailwind CSS klasom ml-4
-u div elementu sa klasom ml-4 kreiramo h3 element i dodajemo komponentu Rating sa prop rating
-u komponentu CardContent dodajemo komponentu Comment sa prop comment
-u komponenti Card kreiramo div element u koji dodajemo vrijednost prop children
-u komponentu Rating.tsx importujemo React ikonice FaStar i FaRegStar
-funkciji Rating() dodajemo parametar destruktuirani prop rating
-u funkciji Rating() dodajemo metodu Array.from()
-vrijednost metode Array.from() pohranjujemo u varijablu const stars
-u jsx-u roditelj div elementu dodajemo Tailwind CSS Flex klase
-u div element dodajemo metodu stars.map() sa parametrima isFilled, i
-u funkciji map() kreiramo varijablu const className
-u izjavu return dodajemo uslov ternarni operator za varijablu isFilled
-u prvi uslov dodajemo komponentu FaStar sa prop className i key
-u drugi uslov dodajemo komponentu FaRegStar sa prop className i key
-u komponentu Comment.tsx dodajemo direktivu 'use client'
-importujemo funkciju useState iz paketa React
-importujemo komponentu Button iz komponente ui/button.tsx
-funkciji Comment() dodajemo parametar destruktuirani prop comment sa tipom string
-kreiramo state varijablu isExpanded i set funkciju setIsExpanded
-kreiramo funkciju toggleExpanded()
-u funkciju toggleExpanded() dodajemo funkciju setIsExpanded(!isExpanded)
-kreiramo dvije varijable const longComment i const displayComment
-u roditelj div elementu kreiramo p element u kojem prikazujemo varijablu displayComment
-dodajemo logicki operator za varijablu longComment && i komponentu BUtton
-komponenti Button dodajemo prop variant, className i onClick
-u prop onClick proslijedujemo funkciju toggleExpanded
-u komponentu Button dodajemo ternarni uslov za varijablu isExpanded

135. Fetch and Delete User Reviews
-u actions.ts fajlu u funkciju fetchPropertyReviewsByUser() dodajemo metodu await getAuthUser()
-vrijednost metode await getAuthUser() pohranjujemo u varijablu const user
-dodajemo metodu await db.review.findMany()
-vrijednost metode await db.review.findMany() pohranjujemo u varijablu const reviews
-u funkciju findMany dodajemo objekte where i select
-u objekt select dodajemo objekt property
-dodajemo izjavu return reviews
-u funkciju deleteReviewAction() dodajemo parametar prevState
-u funkciji deleteReviewAction() destruktuiramo varijablu const { reviewId} iz varijable prevState
-kreiramo varijablu const user
-dodajemo blokove koda try - catch
-u blok koda try dodajemo metodu await db.review.delete()
-u funkciju delete dodajemo objekt where
-dodajemo funkciju revalidatePath()
-dodajemo izjavu return objekt poruku da je recenzija uspjesno obrisana
-u blok koda catch dodajemo funkciju return renderError(error)

136. IconButton Component
-u komponentu Buttons.tsx importujemo React ikonice LuTrash2 i LuPenSquare
-kreiramo tip actionType
-kreiramo i eksportujemo funkciju IconButton() 
-funkciji IconButton() dodajemo parametar destruktuirani prop actionType sa tiopm actionType
-u funkciju IconButton dodajemo funkciju useFormStatus()
-vrijednost funkcije useFormStatus() pohranjujemo u destruktuiranu varijablu const { pending }
-kreiramo funkciju renderIcon()
-u funkciju renderIcon() dodajemo uslov switch (actionType)
-u slucaj edit dodajemo komponentu LuPenSquare
-u slucaj delete dodajemo komponentu LuTrash2
-u slucaju default kreiramo varijablu const never sa tipom never
-dodajemo objekt throw new Error()
-u jsx-u dodajemo komponentu Button sa prop type, size, variant i className
-u komponentu Button dodajemo uslov ternarni operator za varijablu pending 

137. Reviews Page
-u komponenti reviews/page.tsx funkciji ReviewsPage() dodajemo asinhronost
-importujemo funkcije fetchPropertyReviewsByUser i deleteReviewAction iz foldera utils
-importujemo tsx komponente EmptyList, Title, ReviewCard i FormContainer
-u funkciju ReviewsPage() dodajemo metodu await fetchPropertyReviewsByUser
-vrijednost metode await fetchPropertyReviewsByUser() pohranjujemo u varijablu const reviews
-dodajemo uslov if (reviews.length === 0)
-u jsx-u dodajemo prazan fragment kao roditelj element
-u jsx dodajemo komponentu Title sa prop text
-kreiramo section element sa Tailwind CSS klasama
-u section element dodajemo metodu reviews.map()
-destruktuiramo varijable const { comment, rating } iz variant review
-destruktuiramo varijable const { name, image } iz varijable review.property
-kreiramo varijablu objekt const reviewInfo
-u funkciju map() dodajemo komponentu ReviewCard sa prop key i reviewInfo
-kreiramo funkciju DeleteReview()
-funkciji DeleteReview() dodajemo parametar destruktuirani prop reviewId sa tipom string
-u jsx-u dodajemo komponentu FormContainer sa prop action
-kreiramo funkciju deleteReview()
-u prop action proslijedujemo funkciju deleteReview
-u komponentu FormContainer dodajemo komponentu IconButton sa prop actionType
-u komponentu ReviewCard dodajemo komponentu DeleteReview sa prop reviewId

138. Reviews Loading Component
-u folderu app/reviews kreiramo komponentu loading.tsx
-u komponentu loading.tsx dodajemo direktivu 'use client'
-importujemo komponente Card, CardContent i CardHeader iz komponente ui/card.tsx
-importujemo komponentu Skeleton iz komponente ui/skeleton.tsx
-kreiramo i eksportujemo funkciju loading()
-u funkciji loading(), u jsx-u kreiramo roditelj section element sa Tailwind CSS klasama
-kreiramo funkciju ReviewLoadingCard()
-u funkciju ReviewLoadingCard(), u jsx-u dodajemo komponentu Card roditelj element
-u komponentu Card dodajemo komponentu CardHeader
-u komponenti CardHeader kreiramo div element sa Tailwind CSS Flex klasama
-u div element dodajemo komponentu Skeleton i kreiramo jos jedan div element
-u div element dodajemo dvije komponente Skeleton
-komponentama Skeleton dodajemo Tailwind CSS klase

139. PropertyRating Component - Complete
-u actions.ts fajlu kreiramo i eksportujemo asinhronu funkciju fetchPropertyRating
-funkciji fetchPropertyRating() dodajemo parametar propertyId sa tipom string
-u funkciju fetchPropertyRating() dodajemo metodu db.review.groupBy()
-vrijednost metode db.review.groupBy() pohranjujemo u varijablu const result
-u funkciju groupBy() dodajemo niz by, objekte _avg, _count i where
-u izjavu return dodajemo objekt ukoliko ne postoje recenzije
-u komponentu PropertyRating.tsx importujemo i kreiramo funkciju fetchPropertyRating iz foldera utils
-funkciji PropertyRating() dodajemo asinhronost
-vrijednost funkcije await fetchPropertyRating(propertyId) pohranjujemo u destruktuirane varijable const { rating, count }
-dodajemo uslov if (count === 0)

140. Allow Review
-u actions.ts fajlu kreiramo i eksportujemo asinhronu funkciju findExistingReview()
-funkciji findExistingReview() dodajemo parametre userId i propertyId sa tipovima string
-u izjavu return dodajemo metodu db.review.findFirst()
-u komponentu properties/[id]/page.tsx importujemo i kreiramo funkciju findExistingReview
-importujemo funciju auth iz paketa Clerk 
-vrijednost funkcije auth() pohranjujemo u destruktuiranu varijablu const { userId }
-kreiramo varijable const isNotOwner i const reviewDoesNotExist
-u jsx-u dodajemo logicki operator za varijablu reviewDoesNotExist && i prikazivanje komponente SubmitReview


Section 04: Booking

141. Booking Model
-u reviews/loading.tsx komponenti brisemo komponentu CardContent
-u schema.prisma fajlu kreiramo model Booking
-u modele Profile i Property dodajemo opciju bookings
-u terminalu ukucamo komandu npx prisma db push
-u terminalu ukucamo komandu npx prisma studio

142. Booking Components
-u actions.ts fajlu, u funkciju fetchPropertyDetails(), u funkciju findUnique() dodajemo objekt bookings
-u objekt bookings dodajemo objekt select
-u types.ts fajlu kreiramo i eksportujemo tipove DateRangeSelect i Booking
-brisemo komponentu BookingCalendar.tsx
-u komponenti properties/[id]/page.tsx brisemo import za komponentu BookingCalendar
-u folderu components kreiramo folder booking
-u folderu booking kreiramo pet tsx komponenti: BookingCalendar, BookingContainer, BookingForm, BookingWrapper i ConfirmBooking

143. Zustand Library
-otvorimo link: https://zustand.docs.pmnd.rs/getting-started/introduction
-u terminalu instaliramo paket Zustand sa komandom npm i zustand@4.5.2
-u folderu utils kreiramo store.ts fajl
-u store.ts fajl importujemo i kreiramo funkciju store iz paketa Zustand
-importujemo tipove DateRange i Booking
-kreiramo tip PropertyState
-funkciji create dodajemo tip <PropertyState> 
-u funkciju create dodajemo izjavu return i objekt
-u objektu se nalaze key - value parovi za propertyId, price, bookings i range
-vrijednost funkcije create() pohranjujemo u varijablu const useProperty
-eksportujemo varijablu const useProperty
-u komponentu BookingWrapper.tsx dodajemo direktivu 'use client'
-importujemo funkcije useEffect i useProperty
-importujemo tip Booking
-importujemo komponente BookingCalendar.tsx i BookingContainer.tsx
-kreiramo tip BookingWrapperProps
-funkciji BookingWrapper() dodajemo parametre destruktuirane prop propertyId, price i bookings
-parametrima dodajemo tip BookingWrapperProps
-u funkciju BookingWrapper(), dodajemo funkciju useEffect()
-prvi argument funkcije useEffect() je anonimna funkcija
-drugi argument funkcije useEffect() je prazan niz
-u anonimnu funkciju dodajemo funkciju useProperty.setState()
-u jsx-u dodajemo prazan fragment roditelj element
-u prazan fragment dodajemo komponente BookingCalendar i BookingContainer
-u komponenti properties/[id]/page.tsx kreiramo funkciju DynamicBookingWrapper()
-u jsx-u, u div element za kalendar dodajemo komponentu DynamicBookingWrapper
-komponenti DynamicBookingWrapper dodajemo prop propertyId, price i bookings

144. Booking Container / Calendar - Initial Setup
-u folderu utils kreiramo calendar.ts fajl
-u calendar.ts fajl importujemo tipove DateRange i Booking
-kreiramo i eksportujemo varijablu const defaultSelected 
-kreiramo i eksportujemo funcije generateBlockedPeriods(), generateDateRange(), generateDisabledDates() i calculateDaysBetween()
-u komponentu BookingContainer.tsx dodajemo direktivu 'use client'
-importujemo i kreiramo funkciju useProperty iz utils/store.ts fajla
-importujemo komponente ConfirmBooking.tsx i BookingForm.tsx
-u jsx-u dodajemo roditelj div elementu Tailwind CSS klasu
-u div element dodajemo komponente BookingForm i ConfirmBooking
-vrijednost funkcije useProperty() pohranjujemo u varijablu const state
-u komponentu BookingCalendar.tsx dodajemo direktivu 'use client'
-u komponentu BookingCalendar.tsx importujemo funkcije useEffect i useState
-importujemo tip DateRang iz paketa React Day Picker
-importujemo komponentu Calendar iz komponente ui/calendar.tsx
-importujemo funkciju useProperty iz utils/store.ts fajla
-importujemo varijablu defaultSelected iz utils/calendar.ts fajla
-kreiramo varijablu const currentDate
-u funkciju useState() dodajemo varijablu defaultSelected
-kreiramo state varijablu const range i set funkciju setRange()
-funkciji useState dodajemo tipove <DateRange | undefined>
-u jsx-u dodajemo komponentu Calendar
-komponenti Calendar dodajemo prop mode, defaultMonth, selected, onSelect i className
-dodajemo funkciju useEffect() sa dva argumenta
-prvi argument je anonimna funkcija, a drugi argument je prazan niz
-u anonimnu funkciju dodajemo funkciju useProperty.setState()